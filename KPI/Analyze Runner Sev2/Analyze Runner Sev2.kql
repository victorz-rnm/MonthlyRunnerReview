https://dataexplorer.azure.com/clusters/icmcluster/databases/IcmDataWarehouse?query=H4sIAAAAAAAAA%2B1ZbW%2FbOBL%2B3l%2FBFRaQVah2nBc3SeHbS500G2yb5Bxf94AkKFiJttlIopeikrp3199%2BM6ReKFlO0212cQXWHxKJHM4MZ555EdnrEZrQaPmJEZkliWTkZPSGpOx280nEFImEuHlJg5tJTIaEzkRna7ATei%2F03IypkyTgIUvUa57cAEGH5%2B%2F7qZI8mXnk38T8NC9DBFMBVR1nrtQi3e%2F1FkIqGnVjHkiRiqniQdwNRNzj8aJ3u9UrWKa9kCnKo7Tn%2BKQY9InTm4uYOd4LLeaJlgVy8tf%2FGk3%2FxZMlTSaMxidhCiqEy4SCvM6l29%2FY2d5zfQIPg0EfHwbPt7a28WF3c7e%2FiQ%2Fbm4O9DXx4vrO3pYkHu4PdHbNqZ3tXU2%2Fv7W7taqLNwWDXzG0%2F10R7WzvbWwVH%2FTDY6A%2B23GtUWus3BsszafQD9dytve3t5%2B4La%2B6VpDG7E%2FLmfE5TVt%2FDmE0lS%2BejiINFJuKGJQfpMglc3z2X7JAtIrGMYeYgUFwkKYrVjKuZFp4jyahi4xkwOUm44jSqyGFsfKwJgB%2B%2BsNCee0sjHsLig%2FGbCYsXETxaMuEvAGM80zJrIvUcOz96yaZCsvGxodUS8qnXF2vnxsfV46wUNw7oK86ihs8nLFXkmC7ImNFU8yhHDg7PCFqZcMVi3HtKLgKWUMkFGYlbJllI3i8JJbgC5o8FjciFgi2SkzTNGAyNaJYaqmBOk1m1918ScZfk3gQcZ5Jd8FlCFTzU9TuIIhFo4yIdC4HpPzKh6NHHgIGpQ23yVGQyYMdSZIvm5MVNdirUwS0spu8jZpFXPsw1gLmzi3MpbnkK4sAxBkRHUgqJ67S2b%2BNfwSRMWozOFkyWGho%2BF9n7NJB8gaNj9lsGBkoncymUMlswvF4KoSAB0AWMnMrFYZIauxVGgr1fQO6BHIQ2KdJLaqL5P%2BRuDi4gBpyHaPW%2FWRmqmhdSskjrh%2FH0mbgXh6dGfvrsZ65GIgOkEtLr6ZzHJBmdY9oDBmkWx%2BBtyIZznqhuksXvFlQqrkNnuLlhhnEHis2Ww3SeTacRI1TO3sU86bwRIZ9yFqJuPnnqIQyKTYAqIBCSJqFRRIRE50c625aKw9aZ5GpJhkOySbSCmImRKC2Jzu7QUXmy4Anp1LKbh4te0yQEGpw1k0TBLLKAzUDYTTg4hdxxNSdPSe4ZcgoZZp%2B4ecLBN3xhM9j5fvlE4OkkSRVNAou4GIEBHdf7xcMaideXLjmYzWTO0yU9kg%2FYsuuDlYxrGH%2BqjWN4U6BhM7B4SBSKAaHso2JJaG9lSDifdniaCIjshVp2qjnPtwj9hh5ek1upxxqOxXzJtRjwWzZjcze2WOWqx5GbfvAtw1mri3TaWKyHYa3%2B7%2BtZ4wkQL1Wq%2FeFcHhQGvIbS6pZvJE8DxHU9S9RJelAZfEViw3pYB5HDhmtxyJPGZLkoVDbqI5hbyx2wcXKU6gHHb6xq1jJcUI21kNfKkKHG2kHGxzXiQCTQcyQpcUqQwbxTGQDfsBZgtOXbcjz4NbPZySHmsydWeqslm1qaMGtHGSQxeDWZ8EmZCh%2BcBa28g3uu6eJ9Y6qjH7%2BQ6ipnXyDSzqa%2FMmaaP3gT0zt461QbsLCBacwCxheSHSArT3A4krr%2B6iJIpXZ75Zf5Dt8Rmmdqnr%2BlgHOTdaccVIFxIjQrnT6JQrXElATGM3nFKKIi37ou%2F7nyEzpLLQhNoeyE77MZYgZqbpgjrUFlKpIDBYI01xdB4ZSbcC0WP0DjeHntQjsfkmLAubxyxqODU90aXDk6vvV%2BceP%2FTG6wJYFN57vG2oT1KChbGOSDOVyKDyxQln9926%2F6RWWpXxYwH0pQqmyIgEnqiCkc7dcKmv1m0vE51WFgSYYmZAEQ5dDbFIsaQ2YlKu%2FXHWNCK2dZRqUVamX02Em0oYG3PnSBW5O6IRIEtsRyI1ZtBf%2FEUK2Z6mxa30lbQK6LLUQXIlwn%2FQI8TcNY%2FR0uvVf4i4aPPggw01fZoqM%2FDe32khjQK7kkSmjs64DP%2BzI78OGbg%2BBnjCw%2BlZ94BEp1mwnr6MWEt4i46jRB7VxdOd5l%2F3rdwv6alf22pS3gL5e3BobF4o%2BIbLuZarZARROTNyRWJ%2FDwjHAGLuJYApJ8qys2KinM97TNrv%2BAjJKrvppmWjKKX%2BuHCmjeQP0YRmyqRIaw%2BRqkGqAGUZbCyo5LPyV3aZh0b%2BBddO%2BAr7hLuwlTrteFr2z6HuxoqOIQ6lf3DVOSBxPoZmKG0G4F%2BTSit4BpqGX590%2FhIC37d%2BcbSCt1f9sYeKVl5gJWcqxN4%2BVEBTa%2FyFNH449o7m6zRx%2BSHwEL8%2BYEMmk29obZakdbm%2FbqoiGW8irqrHwo5OBUwpyFdfKAtILD6eow9B4nDtsCr9Dyjw%2FDetB9H0FWyPiZQ2yZWFn51YOHZko8A3fSGX5IQF2I9SlDDdUjfeyz2pfbNPf35qvcRqg9lCY8KfoMbZ5zFHL4rHEKNBwCAmeShszJG0CzLHy51PSj0yFkDGwdwYPPcBNmD136CdyOp62u2aq1v5VUUG8a6iFag21TJ1QCvpmQ9USzdtbXz%2FbFjYhsIfJa5eJ33fjE%2BSvAvi7AWm35CFFH6mE3wpIW6wPao0QhuL86Rip0fotaD%2BuT%2FTbFy0goD0cMxIuTkUMOaZ8udS3QxxvFibSnw9QC9VsaZXgSAQ3Kxur2bL6oavnebOZXI%2Bsv5H8j8v3K%2Bo8fBC%2BzWR325lQk%2FPb6sSZz%2BzUs9den4iaULaxW6LO4ady2ri5bIGRjTQwR7Nb62nQ%2Fn%2B%2F7K4eaze9xPCupnZg2HF9ElWcfY9a55BeYX5LkNy8920hc9zspOKVf6vHn%2FR8HIC7mQW59cFjTHTVHrLr48eP3kJW3XvU4ftwGUHdyw4d1cvoAEFBOAArE0Yf41U3jPnHqFYsni0xp8iGRDIpVwN7lsMBRgPOVa%2B4A6utql5cwJmmg3tEo6vzdiByJkO1fpU873ac%2FgS%2BaahQznZ%2F2Afhitu%2Fpa%2F1cl0JWfPuMfVzQmrh71ND3Qe8%2BpCLpVOMP4JXfvlWsfihPXd2kR41JW6cdmd%2BIkhlexZLqJpxMIQTxCCnOIsUXABzFY5Y6K9m5toMyJGN6A35gyt5Is9bXO4%2BWA2iLdaVxQBc0gADTR8ytFL%2FhhfL66cb98nrC1%2Fk1tk39SsjiEhlTklPe7JSn4s3P%2F7WHhL7tyNUy9kiBXp3cGhnN5Hf%2FFYBdNO874PS%2BcACaF8e6hM%2F5KSs6YHWqPIptGO0%2BtfpNPfrrBJe3CFqDr7h3adw8eN9JrfyTW9TfWxLbit5qwW14%2BF7k%2FQ%2B2FnDOISYAAA%3D%3D

// analyze runnre ICM sev2
let lookBackTm = ago(365d);
let getIncidentLink = (incident:string) {       let link = strcat("https://portal.microsofticm.com/imp/v3/incidents/details/", incident, "/home");     
    link;     
};
let XinyanTeamIds = dynamic(['10549', '10661', '67334', '82812', '42690', '75939', '68685', '105484', '49838', '72668', '10475', '93543', '82813', '60163']);  
let RunnerTeamId = '39447';
let RunnerFrameworkPhases = dynamic(['RefreshClientTokenAsync','PreDeploymentActions']);
let DeploymentPhases = dynamic(['CreateRg','InitialDeployment','RGCreation','Redeployment','ValidateARMTemplate']);
let DeletingRgPhase = dynamic(['DeletePEBeforeRGDeletion','DeletePLSBeforeRGDeletion','DeleteRG','DeleteRg']);
let RcaFields = dynamic(['Test Gap Reason','Test Gap ADO work item','Is Scenario Covered by a Test','Goal State Issue','Caused by change']);
let KnownRunnerFailureSignatures = dynamic(['AllocationFailed','QuotaExceeded','ResourceGroupQuotaExceeded','SkuNotAvailable','ResourceDeploymentFailure','OSProvisioningClientError','RunnerVmWorker','ResourceOperationFailure','SubscriptionRequestsThrottled','RunnerBootstrap','NrpDnsIssue']);
let AllSev2ICMs = Incidents     
| where CreateDate > lookBackTm
| where CorrelationId =~ 'SDNRunners-HitCount'  // runner CP ICM
| summarize hint.num_partitions=20 hint.strategy=shuffle arg_min(ModifiedDate, *) by IncidentId // get all orignal ICM 
| where Severity == 2   // sev2 ICMs
| where OwningTeamId in (XinyanTeamIds) // Landing in Xinyan teams
| parse Title with * 'Runner Name: ' RunnerName ' Region: ' Region  ' Instance: ' RunnerInstance ' Phase: ' Phase
| parse Title with * '][' AggrRegion ' / ' AggrRunnerName ' / ' AggrRunnerInstance '] ' *  // parse aggregated title
| extend RunnerName = iif(isnotempty(RunnerName), RunnerName, AggrRunnerName)
| extend RunnerInstance = iif(isnotempty(RunnerInstance), RunnerInstance, AggrRunnerInstance)
| extend Region = iif(isnotempty(Region), Region, AggrRegion)
| extend Phase = iif(isnotempty(Phase), Phase, iif(Title startswith "[Aggregate]", 'Aggregate Error', ''))
| extend IsAggregated = iif(isnotempty(AggrRunnerName), '1', '0')
| extend FailureType = iif(Phase in (RunnerFrameworkPhases), "Runner Phase", iif(Phase in (DeploymentPhases), "Deployment", iif(Phase in (DeletingRgPhase), "Delete RG", iif(Phase contains "aggregate", "Aggregated", "Testing Failure"))));
let AllSev2ICMIDs = 
AllSev2ICMs
| summarize by IncidentId;
let CurrentICMs = 
Incidents
| where CreateDate > lookBackTm
| where IncidentId in (AllSev2ICMIDs)
| summarize hint.num_partitions=20 hint.strategy=shuffle arg_max(ModifiedDate, *) by IncidentId
| extend StartOfWeek = startofweek(CreateDate)
| extend TeamType = iif(OwningTeamId in (XinyanTeamIds), 'Xinyan Teams', iif(OwningTeamId == RunnerTeamId, 'Runner Team', 'Other Teams'))   // find the owning team type of current ICM
| extend IncidentCause = iif(Tags contains "foundbug", "Prod", iif(Tags contains "runner" or Tags contains "framework", 'Runner', iif(Tags != '[]' and Tags != "[\"RCANeeded\"]", 'Other', 'Unknown')))   // get ICM caused by Tags
| project IncidentId, StartOfWeek, Status, Severity, LastModifiedDate = ModifiedDate, TeamType, OwningTeamId, OwningTeamName, ParentIncidentId, ResponsibleTeamId, ResponsibleTeamName, Tags, IncidentCause;
let ParentICMIDs = 
CurrentICMs
| where isnotempty(ParentIncidentId)
| summarize by IncidentId = ParentIncidentId;
let ParentICMs =
Incidents
| where IncidentId in (ParentICMIDs)
| summarize hint.num_partitions=20 hint.strategy=shuffle arg_max(ModifiedDate, *) by IncidentId
| extend IncidentCauseOfParentIncident = iif(OwningTeamId == RunnerTeamId, 'Runner', 'Prod')
| project ParentIncidentId = IncidentId, IncidentCauseOfParentIncident;
CurrentICMs
| join hint.num_partitions=20 hint.strategy=shuffle (
    AllSev2ICMs     // try to get the orignal owning team for later analyze
) on IncidentId
| extend OwningTeamName = split(OwningTeamName, "\\")[1]
| extend OwningTeamName1 = split(OwningTeamName1, "\\")[1]
| extend ResponsibleTeamName = split(ResponsibleTeamName, "\\")[1]
| project IncidentId, StartOfWeek, Status, Severity, LastModifiedDate = ModifiedDate, RunnerName, RunnerInstance, Region, Phase, FailureType, TeamType, OwningTeamId, OwningTeamName, OriginTeanName = OwningTeamName1, OriginTeamId = OwningTeamId1, ParentIncidentId, ResponsibleTeamName, ResponsibleTeamId, Tags, IncidentCause, IsAggregated
| join kind=leftouter hint.num_partitions=20 hint.strategy=shuffle(
    cluster('aznwsdn.kusto.windows.net').database('aznwmds').MetricTelemetry    // try to get the flavor of runner Instance
    | summarize hint.num_partitions=20 hint.strategy=shuffle by RunnerInstanceName, RunnerFlavor
    | where isnotempty(RunnerFlavor)
    | project RunnerInstanceName, RunnerFlavor
) on $left.RunnerInstance == $right.RunnerInstanceName
| extend RunnerFlavor = iif(isnotempty( RunnerFlavor), RunnerFlavor, "Unknown")
| extend RunnerName = tostring(split(RunnerName, ".")[1])
| project IncidentId, StartOfWeek, Status, Severity, LastModifiedDate, RunnerName, RunnerFlavor, RunnerInstance, Region, Phase, FailureType, TeamType, OwningTeamId, OwningTeamName, OriginTeanName, OriginTeamId, ParentIncidentId, ResponsibleTeamName, ResponsibleTeamId, Tags, IncidentCause, IsAggregated
| join kind=leftouter hint.num_partitions=20 hint.strategy=shuffle(
    IncidentHistory                     // try to get auto-triage information
    | where ChangeDate > lookBackTm
    | where IncidentId in (AllSev2ICMIDs)
    | where ChangeCategories =~ '["Edit","SeverityDowngrade"]' and ChangedBy =~ 'CN=networking-autotriage.azure.com'   // auto-triage
    | summarize by IncidentId
    | project IncidentId, SeverityDowngradeBy = "Auto-Triage"
) on IncidentId
| extend SeverityDowngradeBy = iif(isnotempty(SeverityDowngradeBy), SeverityDowngradeBy, "DRI")
| project IncidentId, StartOfWeek, Status, Severity, LastModifiedDate, RunnerName, RunnerFlavor, RunnerInstance, Region, Phase, FailureType, TeamType, OwningTeamId, OwningTeamName, OriginTeanName, OriginTeamId, ParentIncidentId, ResponsibleTeamName, ResponsibleTeamId, Tags, IncidentCause, IsAggregated, SeverityDowngradeBy
| join kind=leftouter hint.num_partitions=20 hint.strategy=shuffle (
    IncidentCustomFieldEntries
    | where IncidentId in (AllSev2ICMIDs)
    | summarize kind=leftouter hint.num_partitions=20 hint.strategy=shuffle arg_max(ModifiedDate, *) by IncidentId, IncidentCustomFieldId
    | extend IsTriaged = iif(DisplayName in (RcaFields) and isnotempty(Value), 1, 0)
    | summarize IsTriaged = max(IsTriaged) by IncidentId
) on IncidentId
| project IncidentId, StartOfWeek, Status, Severity, LastModifiedDate, RunnerName, RunnerFlavor, RunnerInstance, Region, Phase, FailureType, TeamType, OwningTeamId, OwningTeamName, OriginTeanName, OriginTeamId, ParentIncidentId, ResponsibleTeamName, ResponsibleTeamId, Tags, IncidentCause, IsAggregated, SeverityDowngradeBy, IsTriaged
| join kind=leftouter hint.num_partitions=20 hint.strategy=shuffle (
    IncidentBugs
    | where CreatedDate > lookBackTm
    | where IncidentId in (AllSev2ICMIDs)
    | summarize by IncidentId, IsTriaged = 1
) on IncidentId
| extend IsTriaged = iif(isnotempty(IsTriaged), IsTriaged, 0)
| extend IsTriaged = tostring(iif(IsTriaged == 1, IsTriaged, iif(IsTriaged1 == 1, 1, iif(isnotempty(ParentIncidentId) or isnotempty(ResponsibleTeamId), 1, 0))))
| extend ParentIncidentLink = iif(isnotempty(ParentIncidentId), getIncidentLink(ParentIncidentId), '')
| project IncidentId, StartOfWeek, Status, Severity, LastModifiedDate, RunnerName, RunnerFlavor, RunnerInstance, Region, Phase, FailureType, TeamType, OwningTeamId, tostring(OwningTeamName), OriginTeanName, OriginTeamId, ParentIncidentId, ResponsibleTeamName, ResponsibleTeamId, Tags, IncidentCause, IsAggregated, SeverityDowngradeBy, IsTriaged, InicdentLin = getIncidentLink(IncidentId), ParentIncidentLink
| join kind=leftouter hint.num_partitions=20 hint.strategy=shuffle (
    IncidentDescriptions
    | where Date > lookBackTm
    | where IncidentId in (AllSev2ICMIDs)
    | where ChangedBy == 'CN=networking-autotriage.azure.com' and Text has "ErrorSignatures: "
    | extend inputText = replace_string(Text, '\'', '')
    | extend Signatures = extract_all(@"ErrorCode:\s*(.*?), ErrorSignatures:\s*(.*?)(?:, Log:)", inputText)
    | mv-expand Signatures
    | extend Signatures = parse_json(Signatures)
    | mv-expand Signatures
    | where Signatures !contains 'n/a' and Signatures !contains "resource group deployment failing multiple times"
    | summarize Signatures = tostring(make_set(Signatures)) by IncidentId
    | extend IncidentCause = iif(Signatures contains "capacity" or Signatures contains "quota" or Signatures contains "SkuNotAvailable" or Signatures contains "LocationNotAvailableForResourceType", "Runner", "Prod")
    | project IncidentId, IncidentCause, Signatures
) on IncidentId
| join kind=leftouter hint.num_partitions=20 hint.strategy=shuffle (
    ParentICMs
) on ParentIncidentId
| extend IncidentCause = iif(isnotempty(IncidentCauseOfParentIncident), IncidentCauseOfParentIncident, iif(IncidentCause =~ 'Prod' or IncidentCause =~ 'Runner', IncidentCause, iif(isnotempty(IncidentCause1), IncidentCause1, iif(IncidentCause =~ 'Other', 'Prod', iif(OwningTeamId == RunnerTeamId, 'Runner', 'Unknown')))))
| project IncidentId, StartOfWeek, Status, Severity, LastModifiedDate, RunnerName, RunnerFlavor, RunnerInstance, Region, Phase, FailureType, TeamType, OwningTeamId, OwningTeamName, OriginTeanName, OriginTeamId, ParentIncidentId, ResponsibleTeamName, ResponsibleTeamId, Tags, IsAggregated, SeverityDowngradeBy, IsTriaged, InicdentLin, ParentIncidentLink, IncidentCause, IncidentCause1, IncidentCauseOfParentIncident
