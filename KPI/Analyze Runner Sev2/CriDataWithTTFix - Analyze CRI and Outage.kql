// find ICM detail information and TTE, TTFix, TTR, TTRF, TTRR, TTRRF, TTRRRF, TTROutage, TTROutageFix, TTROutageR, TTROutageRF, TTROutageRRF, TTROutageRRRF

https://dataexplorer.azure.com/clusters/nrp/databases/test?query=H4sIAAAAAAAAA81XbW%2FbNhD%2B7l%2FBZkAtdX6NX%2BI0dYHUaVcDdVo0Qjug6QxGom3WlOiRVBJ3L799R1KyJEtN03XYZiAxfTw%2Bd7x7eDwyohDjfP0M%2B2svRGOEl9zpjjqBe1JjMOcJGr5UIZvwSJFIgYIjlXgMfzRaurXfagg%2BWlEqsunCtCAbhn3iHNQPGsj820mQluh%2FsNoFfL203UZv7TySIRYK%2FRpzRSTCUYAiHjWvBMFrMIXkBnRkwdxh3tzD6EpuTjIL4E3ZxEtv9qoCFsHOqNoWwHsFcBxa7IcJ9mEZG1SIkNrvCrR%2BAU3v0cBdHiR4vTKeCUQV1qCAxSzSkwSoXwZiRMqmWuGoCmxYAFtasKcJ2KAMtoTAKSK%2BiHdUwPuhd3yS0sBYq8g6ZIHdsdtRHvDJh1%2Befnyk3UsDd5RHDPl1kmOFl0WuHBdgHjSbBqnZzGONqrF8HobgWBGv28kDXl7KH%2FPUO86QzrkIMaOfCQpjpugG9nqzokBxw2ekOMJpDIzIrLMWan%2FYM7gkahr5NAAnXtForc8gTX5XHERmVWDCx8o5WCm1kY%2Fb7Q0XCrNWSH3BJV8o6oct2Fmbhpv2da%2BdAsp2QBSmTLZhK6kQdtZe8ZAcJNvSJk70IOch5BNTMVUkTH284WKtf0%2BD%2B3sZkOsW%2FhwLYnwLpRm3X0ekPddwELdQtklAlXYvM3CHXxewQUY8gsNzHBLtVwTfj1FFBdswCgGWusiZsdHUp%2FRyt3FQE0RCIkGH0oWDhcDbOSPRUq2cHYCLnqJuIwP80P3YQBosgbEQqZM%2F02iLI%2B3hNJCAG2xBlfrOh3q3M%2Bgf1xsIBsNhVw%2BGR71eXw9Gh6PuoR70D4fHHT04Ghz3jPJwNBwN7KpBf9S3o%2F6RER33Bv1eut4Mhp3u0Ay63X5%2FZJC6vUGn16t%2FTK4AzNgZVhg881kMzBROPU0XkCiAKcFbPtBEYJhvrUGHt25oFPAb2YqIqrstrXSFJXHqEzhMPALRT0TNp344T5kt5%2B%2BpWnnebe13OCBEEDTjAV1QEoBxAgHNbqmdxuubCHJoIwdkRU4hlK65RKgk4UZtHfQGCzCTmgPO1IBu4IrSNGdxQJBaETSdzOAbK7TCEm0gvaC7s5cu9rYbYNKfqD7Rew2JAPLD8SJBHXGBpvJ1DPWHnPoqxgyNx6hrAwnY0zOd4SSigCvjEG49XR2utijz7aSWqZBbuHgDNDGF18RiDFUDIkoUDYmz0PVFzXe%2FMz3I5BY%2BzdmsGQR1182wUg8TEu9ClMrdBlpgJgEhJ9nfVvVSO1sG2MlfYunJ5f5yK4XpTiMbT%2BVFb9h5SxhsJigbzE3ahfuiqTyNFT8jiviVAPnZFKEgyyLmeS%2Fo7T6CEdqF6dDznkelzRlhqmeHnjcra81SnVnOMhyxV4VaWb9XRR9UVHQ424rbuufkzgHwpG15uK1rwxvBP8H%2Bc3QEn6hikM08ufLHs1E4Go3cwUyKbqkQO0UVN1sT4Uidm8JrJbrzxL46ZRTLBrLXzITH%2BlZKfjAuSZCIPO9M%2FztPQp1kxgS1gS7INRHQYMAovpK%2BoBtFeZSsLOZ%2Bn7kN9AZCF%2BpTHibByAQXCqsYnEu%2FLYPBKHQhe7QEJfihM9pIUwsh%2F8ShekE%2FGowZWSgeQ5E1F8WKRqoVxeEcKhF0RuCsHA86VgyJBMDldixX8WIB7cNuQWnGMXNV1TuRfaVoT%2F2ZLkbvoYKueCwJTKb5thXwBSUseA43AE1a9P2KmdRnWwFtYf5i2U46J61j2TNGB1MpYzLRu%2BJie5CYyIrnN8UJi%2BU8xLdOkcCP3GIJbhjj32fJflK34Rhos%2FrQ233BBVLYF5zPd3CF6sIN5RoV%2Fam5NR7lf%2F9DrNnjRsaJ%2BzJAXkR4I1dcvTsspD53YRUu73vS44572yJUlam3nKsJBv%2F%2Bh%2FHa%2BSbTp8ECXEECxMjX8hLX7iJqfqfFeORmICCTU1OtgHtJ1QLJGTwI0%2BKnJ4pPfAem01lziRqw4Nl2Ak%2B%2BJbFxzZv%2FrwOb5vhZvNyFFu4b8zxA%2BsVQQcuKpvLrvPymBOVp%2BRyuchFhtstVBpE9m6SpD2syl0Q52Yo9sLvIn0FVkH%2FX%2Bs2o1O9N4IHtQJCjOOM3EHN7fbnowRjV4YnC2TV0tKYlyTcqudQDPeCZ03Hd7P5PepW9J2u%2B3fhCh5HdzfmFuY4ltz1Dy2wf5bs6pX2J7mU%2Bf2dv8%2B%2F0LV%2FvVv5Gd1LsS7K2JL2OCuX0L7NKRcAoFAAA

https://nrp.kusto.windows.net/test?query=H4sIAAAAAAAEAOVY%2b2%2fbNhD%2bPUD%2bBzYDarmTX%2fEjTjsXSJ12NVC3RWO0A5rOYCTaZkOJmkglcff423ckRUu01TTdA9swA7ao4%2fG74%2fHjHWlGJGKcXz7BweUsQiOEl9zrDNth%2fdH%2bHoPOWUqj5zJiYx5LEkvQ8IRMH8KXxsv6%2ft7P%2b3sIPkpVSJJ0QCElCcMB8Q5qBz7SPxsJUhL1A%2bPryoQa22qhN0YBiQinEv2UcUkEwnGIYh43LlKCL8EaEgnoCNfgYdng%2ffhCJI8KG%2bBPhZHns%2bmLCmAE06Ny7cJ3HXgcGfT7OfphBTrokFQo36vweg6emqgGPD%2fIEbsViDoclWh9B40ZrO9yqF4FFCNCNOQKx5VwAwduaeAe53D9CrglBFCS9POIRw7iN93jR5YS2l4VA2A92G1zHpYhv3v%2f4%2bMPD5SLNoBHDmbEr%2fL1lni5xZxjB%2bheo6GxGo0y2vAzaAGPInBuC7HTLkOen4tvy1Q8LmG95GmEGf1EUJQxSROY8fWKAuk1w5HkCNtIaJEZaGzs7%2f2a780lkZM4oCF48oLGl2pv0vy9coMyowRdAZbewUrKRDxstRKeSsyaEQ1SLvhC0iBqwgRbNEpaV92WhRStkEhMmWjBhKwQ5tda8Ygc2MlpG%2fBxvITFxTSdSBJZP695eqneJ%2bHXeBqSqyb%2blKVE%2bxcJ3W69iklrrgAhgJFokZBK5WJh4lbfzmCajMwIjl7iiCjfYng%2bRJUZLmEUQi1UGtRtrav273kRANBLiYBlBSVKFx5OU7yeMxIv5crbINTRY9TxC8T3nQ8%2bUmgWx2AUrv5A4zWOlZ%2bTUAB0uAZtGnjva512v3dc8xE0BoOOagyOut2eagwPh51D1egdDo7bqnHUP%2b5q5cFwMOybUf3esGdavSMtOu72e107XjcG7c5ANzqdXm%2bokTrdfrvbrX2wlQIzdoolBtcClgFVU69m1w0YFUJXypsBcCbF0N%2b8BB3evKZxyK9FMyayVm8qpQssiFcbwwbjMYi%2bJ3I%2bCaK5JbqYv6NyNZvd7O%2f9AnuGpARNeUgXlIRgnUBUi3JWqLy6jmExTfCAu8hzolnXpYYKEiVy7aHXOAVD1iDQZ38PqAfeSEV7loUEyRVBk%2fEUnliiFRYogVUG5cKiHT5bJ0Cq31BtrOYbkRT2Auw3EtYQT9FEvMogM5GTQGaYodEIdRQEuYFaG5a8zqm5Q1fPVamrwSGwCfyUqJiBj2ZUMiDqWCdsFSjfCZvv%2bOtvWS7eYxzLskSdCnAgTxjFwkdmm495pvJC%2fsK4IGEums1O1c9L9fM0XqrHM3qjHlMfnZErkkK2h1Z2IYKUJpLyOB85ESeZ5KdEkgBC52%2fFzUevuZCRCmuUT7QQnEksM3DOPp9jMRPKNhQEBXTWHbTfEIY1rnpRKaqwkJMbFntyqrZdznIVaJFFcFxRSfxiXQo2jCgp5UtZBB4wJAeiE0lh%2fRaqEMj55r28QLU1fBrTaSMMa%2fV6Ccz6lieYDXGtvO6jBWaC%2bGXJNtWqh5reXYCN3IRve7iRQnfbL9pObHcNljrNwG2Ru%2bi7AOVei%2bDISiHTTNuG0EIz0jY1MXf1QGj1TBMou6s1tTrTsmlIfi%2bccla7U%2bHtVxReSLuSm8LklfITUKVlyLiuactJyj%2bSvzID3CX3%2fB%2bzRL62KuYfOdQVuE2EI0YWkmdQAE0hX9FYNuMsmkONgOMsuCtG%2fbYRw1oC5HI9EqtssYDTnqdGVBbQXPaFujkJpirzvIMStuKZINBp19UUoGeUsPApFGFqb1LbFSuvkCbjmdL42cJpD7RKyfBkhA4mQmRkrObF0%2fWBNVJky68KCE6X8wjfeC5XH9TdnOtr63%2fSlPlYx4Hyyq7a4mZmUMOdmcFmfAsnGZWoIT0j16H9PYgNjx3J38SRght3ZYI4i3EiVly%2bPXQpUKpS7jnqjjy57QhlIKoy0xvO5RiDi%2f%2fSsG38E5v72wKcQSnIUaA6dol3G22d%2bbphKXVBXMYnOk8BE%2fN8BZJTuMHbtKc63L9nPOi2vbqCarDwyXoMN%2fQlseF1PPjH42sX%2b0m2LCIM5Ubf4JC61FWxtOq4%2f2Waft1KlVn6FKp5GmNWLFqBUdxvhU4bl2QuiPSKIfXt7HDLbiiwqnfD5hA4pUL9RwCkMEcR5EnO%2bDUE31SxOro3QjW4R3J2BfcNfTYpn1hKLACuwGW0Xa8Xx4D8zLL1H4Pn7OnqGRQ1ujyydHQpTVGTtJjIbs22m2CH%2fLvs%2fk%2fccr58avkDpxT3fFIcT2ypcnLs75zrVN%2fzFQAA&web=0

let lookBackTm = ago(180d);
let TrimHtmlContent = (str:string)
{
    let step1 = replace("'", "'", replace(" ", " ", str));
    // Replace smart quotes and non-breaking spaces
    let step2 = replace("&nbsp;", " ", step1);
    // Replace HTML non-breaking space entity
    let step3 = replace("&amp;", "&", step2);
    // Replace ampersand entity
    let step4 = replace("&quot;", "\"", step3);
    // Replace quote entity
    let step5 = replace("&lt;", "<", step4);
    // Replace less-than entity
    let step6 = replace("&gt;", ">", step5);
    // Replace greater-than entity
    let step7 = replace("&#39;", "'", step6);
    // Replace single quote entity
    let step8 = replace("<[^>]*>", "", step7);
    // Remove HTML tags
    let step9 = replace("<!--[^>]*-->", "", step8);
    // Remove HTML comments
    let step10 = replace("\\s+", " ", step9);
    // Normalize multiple whitespaces to a single space
    step10
};
let getIncidentLink = (incident:string)
{
    let link = strcat("https://portal.microsofticm.com/imp/v3/incidents/details/", incident, "/home");
    link    
};
let getRepairItemLink = (workItemId:string)
{
    let link = strcat("https://dev.azure.com/msazure/One/_workitems/edit/", workItemId);
    link    
};
let getSimpleTeamName = (name: string)
{
    let splitList = split(name, "\\");
    let result = iif(array_length(splitList) > 1, splitList[1], name);
    result
};
let XinyanTeamIds = dynamic(['10549', '10661', '67334', '82812', '42690', '75939', '68685', '105484', '10475', '93543', '82813', '60163', '114480', '135033']);
let allData = cluster('https://icmdataro.centralus.kusto.windows.net').database('Common').Get_Icm_Incidents_WithTTx
| where ModifiedDate > lookBackTm
| where OwningTeamId in (XinyanTeamIds) and isempty( ParentIncidentId)
//don't include the ICM that has parrent
| where IncidentType =~ 'CustomerReported' or IsOutageActual == 1
| extend OwningTeamName = getSimpleTeamName(OwningTeamName)
| distinct IncidentId, Title, CreateDate, ModifiedDate, IncidentType, OwningTeamName, OwningTenantName, OwningContactAlias, RepairCount, RepairClosedCount, TTD, TTN, TTEng, TTFix, TTM, Severity, SubscriptionCount, IsAutoDetected, IsOutageActual, PostmortemTitle, PostmortemStatus, Status, HasTsg, Tags, IsS360Related, S360Link, IsOutage;
let ICMIDs = allData
| summarize by IncidentId;
allData
| extend CreateDate = todatetime(format_datetime(CreateDate, 'yyyy-MM-dd'))
| extend IsOutage = iif(isempty( IsOutage), false, IsOutage), IsOutageActual = iif(isempty( IsOutageActual), false, IsOutageActual), HasTsg = iif(isempty( HasTsg), 0, HasTsg), IsS360Related = iif(isempty( IsS360Related), 0, IsS360Related), IsAutoDetected = iif(isempty( IsAutoDetected), 0, IsAutoDetected)
| extend TTFix = iif(isempty( TTFix), 0, TTFix), TTEng = iif(isempty( TTEng), 0, TTEng), TTM = iif(isempty( TTM), 0, TTM)
| extend icmLink = strcat('https://portal.microsofticm.com/imp/v5/incidents/details/', tostring(IncidentId), '/summary')
| project IncidentId, Title, CreateDate, ModifiedDate, IncidentType, OwningTeamName = getSimpleTeamName(OwningTeamName), OwningTenantName, OwningContactAlias, RepairCount, RepairClosedCount, TTD, TTN, TTEng, TTFix, TTM, Severity, SubscriptionCount, IsAutoDetected, IsOutageActual, PostmortemTitle, PostmortemStatus, Status, HasTsg, Tags, IsS360Related, S360Link, icmLink
| join kind=leftouter
    hint.num_partitions=50 hint.strategy=shuffle (     cluster('https://icmcluster.kusto.windows.net').database('IcMDataWarehouse').IncidentCustomFieldEntries
    | where IncidentId in (ICMIDs) and TeamId in (XinyanTeamIds)
    //and Name == "IssueCategory"
    | summarize hint.num_partitions=50 hint.strategy=shuffle arg_max(ModifiedDate, *) by IncidentId, Name
    | summarize hint.num_partitions=50 hint.strategy=shuffle       Category = max(iif(Name =~ 'IssueCategory', Value, ''))  by IncidentId
)
on IncidentId
| join kind=leftouter
    hint.num_partitions=50 hint.strategy=shuffle (     cluster('icmcluster').database('IcMDataWarehouse').IncidentsSnapshotV2
    | where CreateDate > lookBackTm
    | where IncidentId in (ICMIDs) and isempty( ParentIncidentId)
    | project IncidentId, RootCauseId
)
on IncidentId
| join kind=leftouter
    hint.num_partitions=50 hint.strategy=shuffle (     cluster('icmcluster').database('IcMDataWarehouse').RootCauses
    // find root cause
    | summarize arg_max(ModifiedDate, *) by RootCauseId
    | project RootCauseId, RCATitle = Title, RCADesscription = TrimHtmlContent(Description), IsCausedByChange
)
on RootCauseId
| join kind=leftouter
    hint.num_partitions=50 hint.strategy=shuffle (     cluster('icmcluster').database('IcMDataWarehouse').IncidentBugs
    // get work item
    | where CreatedDate > lookBackTm
    | where IncidentId in (ICMIDs)
    | summarize arg_max(ModifiedDate, *) by IncidentId, ExternalId
    | summarize RepairItems = make_set(ExternalId) by IncidentId
    | project IncidentId, RepairItems
)
on IncidentId
| extend IsMissingRCA = iif (tolower(Status) != 'resolved', 0, iif(isempty(RootCauseId), 1, 0)), IncidentLink = getIncidentLink(IncidentId)
| project IncidentId, Severity, IncidentLink, tostring(RepairItems), IsMissingRCA, IsOutageActual, RCATitle, RCADesscription, IsCausedByChange, Title, CreateDate, ModifiedDate, IncidentType, OwningTeamName, OwningTenantName, OwningContactAlias, RepairCount, RepairClosedCount, TTD, TTN, TTEng, TTFix, TTM, SubscriptionCount, IsAutoDetected, PostmortemTitle, PostmortemStatus, Status, HasTsg, IsS360Related,S360Link, Category, RootCauseId

//////////// CRI / Outage TTE, TTFix, TTR, TTRF, TTRR, TTRRF, TTRRRF, TTROutage, TTROutageFix, TTROutageR, TTROutageRF, TTROutageRRF, TTROutageRRRF avg
https://dataexplorer.azure.com/clusters/icmcluster/databases/IcmDataWarehouse?query=H4sIAAAAAAAAA21TXW%2BbMBR9z6%2FwGyClKYSPkFWZFCX74IFlapE6aZoiFy7EKrYj7DRhmvbbZ%2FAIJClPx%2Beee%2B6HcQkS%2FSCsxiwBTKNMoAXKaoYpSc2fhmP73twYIwWCwGlAMHNdrwHhNHSmDfCmwdxuwMyfu604CIPQ11m%2BF3oaebOWmru%2B53b5LQhsJ2iB43he2Do5rm%2B7rvHLehiVqj9clmssseosLQ9CQmUaOyn34sP9PUlppkIVn6TAZIVVfPKqNHxyJCzjRzFhIA1r0ohesADTWHFKOVPUF5DbKKXbiKUkU8li%2B0zkLklOoz%2FouIMKUMwzkhPIVHFAHxEuuOmEdmadBZsjI6zQi0OEIfNikxbCTNEC6F7WJvqOK1WlqxYNbDouqfeAFn%2BRsWomoFA9wp5XEjID8QpFYnOQuIBlKg%2B4RIsFcvR6olUcrZt7%2B78n5SsOlOKK%2FAb0UqO%2B5MOol8BJgmpvVYGarp1wgSRXewJJKJg5ryiW2%2FO516n7qdV3F8d3WWZYVu%2FVdaicCMnN8%2BQdb41RjkuhHAbM9Vjvp%2BrorcGZ%2F4pFIorrdM2qsD3ucSSe3MB%2BhFINk90WHAR14jUVieVB8jVISN81GEY7hwuu31iSfCana4eW1IkdTJJP7Ga4lux0GiZJfKuKO008qPykHo3c5M8ArypDNCeeH9VpcNPWxZ%2B0fCu0PX4rTO3aUnoCTepuW1o3rOmmueZPHBQdDx7PN0ybKx28gusL%2Fgf4BSzJpgQAAA%3D%3D

let XinyanTeamIds = dynamic(['10549', '10661', '67334', '82812', '42690', '75939', '68685', '105484', '10475', '93543', '82813', '60163', '114480', '135033']);
let allData = cluster('https://icmdataro.centralus.kusto.windows.net').database('Common').Get_Icm_Incidents_WithTTx
| where ModifiedDate > ago(180d)
| where OwningTeamId in (XinyanTeamIds) and isempty( ParentIncidentId)
| where IncidentType =~ 'CustomerReported' or IsOutageActual == 1;
let ICMIDs = allData
| summarize by IncidentId;
allData
| extend CreateDate = todatetime(format_datetime(CreateDate, 'yyyy-MM-dd'))
| extend IsOutage = iif(isempty( IsOutage), false, IsOutage), IsOutageActual = iif(isempty( IsOutageActual), false, IsOutageActual), HasTsg = iif(isempty( HasTsg), 0, HasTsg), IsS360Related = iif(isempty( IsS360Related), 0, IsS360Related), IsAutoDetected = iif(isempty( IsAutoDetected), 0, IsAutoDetected)
| extend TTFix = iif(isempty( TTFix), 0, TTFix), TTEng = iif(isempty( TTEng), 0, TTEng), TTM = iif(isempty( TTM), 0, TTM)
| extend StartOfWeek = startofweek(CreateDate)
| summarize AvgTTM = avg(TTM), AvgTTFix = avg(TTFix), AvgTTEng = avg(TTEng) by StartOfWeek, OwningTeamName, IncidentType, IsOutageActual  

  