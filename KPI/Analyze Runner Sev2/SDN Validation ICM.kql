https://dataexplorer.azure.com/clusters/nrp/databases/test?query=H4sIAAAAAAAAA71XbW%2FbNhD%2B7l%2FB5oukQo2bFtuHding2GkrIG9IjPRDmhmMdLbZUKRA0kncbf3tu9OLRcX2mq7YAlgRece748O75ygJjkmtbw94ejvO2T7jMx2%2B%2FvWXLHrbkygbG5F%2FdLkcauVAOVQIrTNv8CfULOr90WP4R4rpSsFAIXkK4U6wE7PysZphNEMPXB%2Bhh2axAbuQnbW%2FXf3%2B7vr5O9LHX228XlFp9%2F6qIpyBS1QqMpQfCXVLEYp6vCFMWamgIOUu3Jk7V9g3%2FX6hjeNyNxep0VZPnUjz3VTnfZEX%2FbvX%2Fcag7WfguJC2j0E1kxhif65z2Gk2hC7e0osX4TkUXJjEQd7EeK%2FNLY2T7OlRZnC3y78uDJSx5bZ8758q6E%2FInEBztg%2BZcBRe6%2BAf4rrADUoYA89PeA4Ul8L%2Fb9h6SLaQAgG2dErle6mJe%2F%2F8eWfTSQoxDbkxfDmRoGZuHq4MROwd24tbg1d71zEjYxuP95JLkXEntBrzmUXD2RJ1RRpeBZeDo4vdE1NcKnBnixu7uPmgubxw3EEQr6QnIt0uHNjZIyEmusWgQKVL38gT9c6k3e7sXC8cjPmNhG06Nh8OzgbHvCgQfW%2F2TC5sDQTQQZ1Dqk3WKJyrPMH6MIrLI82zAy65SsGgEynSS1GMwEFKCHoL0K%2BECzB3IoVEWUcrHovHN5lt5t4LlR0Bv4VsOLD%2BnsDqhUmBZFsCxggaydgs4Exb4cTdytt7Lm07eY1J0O93D54wWnSPfjAcJ5eHaOI4GScfBuPDUbmS1iXD42RE2inGgKiEARZz%2FR5Eu2iS33ALYZCkxyMcfOIG5nphAYUNkdgLxQs71%2B7yVe9Pdj8HA2xoADeDKwDz16NMrjImLOSFW4bsDI2pFR9h6ZXiBJPCzCBj%2B%2FtsStutZxE8rLPUeRJ0Bw%2BYVRmZspDVSV%2FQYPLFahXSTLSKytOaczvhasnCbsmQrl3kOTfiK7CbJWuje9v7HzFq3SJzsrA6pqjdL0LRoZe6FUwqKgrHwkmkm%2BAqwEcQ4eM68FZLXHpUEg31sA7vVHY93cTaBYxKIkdlNJ%2BHAUOzTte%2B6iVXntEXbO86ijA1iTXxvNECq3rBI7tD3PxMmyVZbuxV8VisRmhsx%2BxlvDlOdPWq9ZTW5ubbwieeXaWfJyKEcE%2F%2BDJr4ohH7W6zlfQlTR3xkemHZE%2BhR%2B5wKg%2BeAUXHKWSdyKKU%2FkSsjsKkRBaWkLW01CbMlKXyVIUdbbP8bC6izQRaU2TScc4XRHSzZM6G%2BsTCY8QXifZciJwxP9rEjlB1RzV7QPB4D7qXtnUHjoi0MbmaTXKiQkjdmz6NupdTqhdFfkEo9QczeE1qHFVhjUTZRstGLelr5FraA%2F7PQHixm1j882jajm0AXxLIwsx%2BqzI0I8YfwWGdiKipj60jF7PCh6kUr1FoT7TWISC3HdjKx4MJ2xdNh90z911Cfa%2B3KLFwBPUXLzOA01ifO%2FxBUK2tr2%2FMkuL%2FhoKQ8xKmmPpzBOloVEgm6l%2FPQKzMs%2FyNuHa7xY8A1%2FrACzg%2BoJRnFU2rIiRrxpa15pmnEWIuVFAmGOjxRxATNTsMg43gdYkrfhxiB7wuHLz0ORlPGnU4%2FAVQXXRzp6T2OwraHdCj7GDkXyxk3VAXDQqelvseTrKKK2LN9FuDdUcs7JImSX31u9HaJoexRNJ79S6ElejxP%2BcXR4BGrbsCxskBKm0B%2B0e2Dr7Ot%2FmraWPe5xiqtxzW%2BeYK7FXyD0em%2Fg8%2BvtzaWTgPrqGAgL0sje5EfyPcuNQ08XI6XBdSgbLrjbLhPUsfrXjC%2Fs7p786Tl3RmcOOkPgoh5kZ3eK4TR%2B2CqLivd6fqrCD9sepvJK0mb78BHX6%2Bhd3WMO1kfdw4xXs%2BguJvEcQNi3L2XdK4EsV%2BHsZdH3dpdb3Ib2YUWKeG0oS02iChebdkfVxi1mPnyBsFqTMyGVDOQglsMFu7ACLcsw8akjR%2FRVLyiyk1Musagbasi6O1QL%2BhjHi%2FlBX3b3bTfxWuTZJYyKl678Mfso75%2FLx4A344xjWZ8C1e3wsi7eXarrP1uQA2Bi5qJ8k6vjaN%2B4hU%2Ft%2BnfgZM7NNARAAA%3D

let lookBackTm = ago(365d);
let TrimHtmlContent = (str:string)
{
    let content = replace("'", "'", replace(" ", " ", str));
    let result = replace("<[^>]*>", "", content);
    result
};
let getIncidentLink = (incident:string)
{
    let link = strcat("https://portal.microsofticm.com/imp/v3/incidents/details/", incident, "/home");
    link;    
};
let getRepairItemLink = (workItemId:string)
{
    let link = strcat("https://dev.azure.com/msazure/One/_workitems/edit/", workItemId);
    link;    
};
let getSimpleTeamName = (name: string)
{
    let splitList = split(name, "\\");
    let result = iif(array_length(splitList) > 1, splitList[1], name);
    result
};
let ValidationTags = dynamic(['VALS.NrpVnetPubsubGoalState','VALS.NrpNicPubsubGoalState','VALS.NrpAsgPubsubGoalStateConsistency','VALS.NrpNsgPubsubGoalStateConsistency','VALS.NrpPlsPubsubGoalState','VALS.NrpRouteTablePubsubGoalState','VALS.NsmCAPAMapping','VALS.NsmPlusValidateNameRecord','VALS.RnmInternalLoadBalancerPublicVipDetection','VALS.RnmStaleServiceInstance','VALS.RnmStaleTbds','VALS.FindLeakedCAs','VALS.NrpResourceLeak','VALS.NsmPlusValidateVip','VALS.TruePositive','VALS.FalsePositive']);
//let ValidationStatus = dynamic(['ACTIVE','MITIGATED']);
let ICMIDs = cluster('icmcluster').database('IcMDataWarehouse').IncidentsSnapshotV2
| where CreateDate > lookBackTm and isempty( ParentIncidentId) and IsPurged == false and IsRestricted == false
| extend ParsedTags = parse_json(Tags)
| where ParsedTags has_any (ValidationTags)
| summarize by IncidentId;
cluster('icmcluster').database('IcMDataWarehouse').IncidentsSnapshotV2
| where CreateDate > lookBackTm and IncidentId in (ICMIDs)
| extend strList = split(replace_string(Title, '[', ''), ']')
| extend listLength = array_length(strList)
| extend IssueDetail = trim(' ', tostring(strList[listLength - 1]))
// get issue detail
| extend IssueCategory = tostring(array_slice(strList, 0, array_length(strList) - 2))
// get categoryh
| extend IssueDetail = iif(isempty( IssueDetail), '', IssueDetail)
| join kind=leftouter
(    
    // get first engaged time
    cluster('icmcluster').database('IcMDataWarehouse').IncidentDescriptions
    | where IncidentId in (ICMIDs)
    | where Cause =~ 'edited' and ChangedBy !in~ ('gautosvc','CN=networking-autotriage.azure.com')
    | summarize arg_min(Date, *) by IncidentId
    | project IncidentId, FirstEngagedTime = Date
)
on IncidentId
| join kind=leftouter
(
    cluster('icmcluster').database('IcMDataWarehouse').IncidentBugs
    // get work item
    | where CreatedDate > lookBackTm and IncidentId in (ICMIDs)
    | summarize arg_max(ModifiedDate, *) by IncidentId, ExternalId
    | summarize RepairItems = make_set(ExternalId) by IncidentId
    | project IncidentId, RepairItems
)
on IncidentId
| join kind=leftouter
(
    cluster('icmcluster').database('IcMDataWarehouse').RootCauses
    // find root cause
    | summarize arg_max(ModifiedDate, *) by RootCauseId
    | project RootCauseId, RCATitle = Title, RCADesscription = TrimHtmlContent(Description), LastRCAModifiedDate = ModifiedDate
)
on RootCauseId
| extend InactiveInDays = iif(Status =~ 'active', datetime_diff('day', now(), ModifiedDate), 0)
| extend StartOfWeek = startofweek(CreateDate)
| extend IsMissingRCA = iif (tolower(Status) != 'resolved', 0, iif(isempty(RootCauseId), 1, 0))
| extend ViolateRcaSLA = iif(isempty(LastRCAModifiedDate), 1, iif(LastRCAModifiedDate - CreateDate > 3d, 1, 0))
| extend ViolateEngagedSLA = iif(isempty( FirstEngagedTime), 1, iif(FirstEngagedTime - CreateDate > 3d, 1, 0))
| extend IsMissingADO = iif (tolower(Status) != 'resolved', 0, iif(isempty( RepairItems), 1, iif(array_length( RepairItems) > 0, 0, 1)))
| extend ParsedTags = parse_json(Tags)
| extend ValType = iif(ParsedTags has_any ('VALS.TruePositive'), 'TruePositive', iif(ParsedTags has_any ('VALS.FalsePositive'), 'FalsePositive', 'N/A') )
| extend OwningTeamName = split(OwningTeamName, "\\")[1]
| project IncidentId, IcmLink = getIncidentLink(IncidentId), IsMissingRCA, IsMissingADO, ViolateEngagedSLA, ViolateRcaSLA, ValType, IssueCategory, IssueDetail, StartOfWeek, CreateDate, ModifiedDate, FirstEngagedTime, LastRCAModifiedDate, MonitorId, OwningTenantId, OwningTenantName, OwningTeamId, OwningTeamName, OwningContactAlias, Severity, Status, InactiveInDays, Title, RootCauseId, RCATitle, RCADesscription, ExternalLinksCount, ResponsibleTeamName, ResponsibleTeamId, Tags, ParentIncidentId, HowFixed, Mitigation = TrimHtmlContent(Mitigation), tostring(RepairItems), IsPurged = toint(IsPurged)
| sort by CreateDate asc  