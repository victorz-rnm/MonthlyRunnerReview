https://dataexplorer.azure.com/clusters/aznwsdn/databases/aznwmds?query=H4sIAAAAAAAAA70Za3PbOO57fgXPs3eyOkoc59W0vXQmddrUM5s047jbm8nmMqxEy2wkyivScd17%2FPYDSD1ISU7b7e5lJjYJggAIgAAIJ0yRJMvuX9HwfpqSE0LjrL9%2FdBj5L7YSWJvmPH2r0mSUCcWEAoS%2BVPlz%2BOci9rf%2BtUXgDxHDCiFni4SGrN%2F7Wy5%2FW2YvegHpefBRw8VHudBgAh9AygdmJZ2cyWXikPn7zT9f3j55ifjwX%2FApdhjsrf8YYWOmxiLkEaz%2FzMU9CsuLeYfEiUGBhZCqfm%2Bu1EI%2BHwwWWa5ospPyMM9kNlM8THfCLB3wdDF42B%2BUBOUgYoryRA5AqBIIIg7mWcp65YGAxQscWBJO2ILyfKxYWsq4yvJ7nI%2Bjb5cyYg879MsyZ1q2VOrx4J1ggzskx4GcHLCIKxSvZvCIXNdwwIRNGU0vacpQLgHfz0lbJLlIOChYopX0WGPC2X%2F9tddlSc5nfZrndH2XMBGreb8i4JOXZBjUBG%2BGtwFBYp3m%2FQcXaypQwnEkgW60BlQe9m%2B84e7hwTMvIDA4Ohri4Ojp%2Fv4BDo73jod7ODjYO3q2i4Onh8%2F2NfLR8dHxodl1eHB8YEYHTzXo2f7hwX65Xw%2BOdodHejAcHhwca0rD%2FcPd%2FX3vtrgrk6UQLDfygXje%2FrODg6eevfYmh7OhNa7mVDL3DBM2g%2BPORwkHR5pm90ycyrUIvcC7ytkZXIZsncLKaah4JmTFtF7poDnKGVVsEgORseCK06RGB9jkXCMAPZywyF77hSY8gs2nk4spA8%2BAocUTPsEpJrHm6bDUa2xyDiSKYVztG48uxmcoYZgspWJ534PLVYw9fwfY0Y9Ar%2B%2BNw4szmHygOZtnS8lgsbzYcuvfZDVnOSPmcIDHwIvqGFavZ3nOEn08tMd%2FiXd9dmnsILffcjXKlnDSrcGA5BpIRlcoIeyXyzSlOf%2FCyJwLtSOW6d2C5oprzZ%2Fs7RowXAzgHa9P5Hw5myWM0Dy%2BS7noX2QRn3EWoWgBeeKTj2tSij%2BOkCFcN0KThGQ5jwVNCrZG7Gv2wHKu1uTkhOwhsmQPe4hRn%2FzdSoD2C0fjgvSdm%2BE7J3B4v0B6My4izb0KZVs%2FYo9rQRdynqlf9r7ZMrVAWnrjFj6hIBeX4Gxq3SdXwEuoGtNH0dlnkC5iRM0ZaoTM6QMogiw0LpCHAbjjlCuwxoqrOXlCPGNxcqmDmVdcRB3iYMJiMOnzakRgNBZSURFayCUEANrfn5eDDRxvTuM4ZzEc%2F%2FbGQwB%2BIaxg4pEBKQC2MC6wZnoL8Cd4epsu%2FTLbfn82OVvS5FqBdq9Z%2FsBDNqXx9uhqe3J5cXuzlFEWhaCYHDxsQE6%2FXDKIK1kiizuw8z7KL2Vc7wQkINuE2mSu8iy6JYe7fyXhnCcRaJ28F3NGEzVfgzLYZ0jNka1iE%2Fy5FJkydq3X%2FMBCDBrqqBYrNWygVK63NgQdukQkY4I2NQ2vEALLXgAsw1xjkwaXy5APKvtEGuL5tU7eQKkAGXq6XpR0DE30%2F87cAGR7hetqAFYZzq5m4McNNawD3YnZBhvjM5mcO8hYYFEuJOk1joMFWAdoyiTSLU%2FY8%2BEPzv0pA673EGpOEjZT2RJCylZfJ%2FUfCDavlrHUNIoYiuoiWOtooBt%2Bonb8sZG6Y1CBUodPHdPp56%2FE9IC8BjPnEMohvhsSizz7xEJlLQR2EvC3wAut%2BZ%2BksDMmw5wvdOKyFUeXKtsO6wTpqOYHFFcYYE5FzKJXOoeBeOkpsLPSsVdgF3ejjQBXZNgyBZqhjdrMrq72bRN1sgGid%2B2F%2F5d53kLNm%2BXr0jI6MwNpMs9WJMpWIs4pZLsVlSBnxDp0%2FAeZaoSFDBQjWD5CnXTTew0vh17QK2uRs1KW3q238YrUEnUUPY7BW2StsGj5DkgyujwRTOkXjYi30WvhNUJjVr99sA5H621P9YIXdFDB9dR4HpRcxF2Mkap8CEtCBSLMziZjz%2Fe%2FIjpS0Sy7D%2FWXE0Mn6D50UAvjP%2BK6HVw3EPyzPXeSZWpEYSwdp80BTEKEf1cErai1Lq61Ajl5dGoqrBNTaWkIhLYqtuGC26joW5HPN0qxmX2TVugXsZKRcFSCsDSSALtg4IrhFHJoCiP3DhcPCl4WL7OEPoDj6QJXSVDOx0q46uTmPgpdNYHTvN57XdRpJqkbdl5RJFclSPmw1Az81uq1w2lzeoMnZgil95SnDMrJdFEZyKmfsDJr2qmFUJdQLvPAEbUg02UFXDGWcKwh8oVjCQV1BwDOmfqZ4tj0L9D8eZZcUTU37AAw4zEEC03RaACc4Sfkt9OWHnX%2FE7zK5l2Lbiiwj4PbGsWhaxn39O5s6Dd11S41m5Zsa9edD9u27jRnUy6Xirk4Xbp6XE91uGweqyFljZnTFTw2sDmgn1R3n2Qm%2Bgixiuj2rW%2Fp3MUANTXjQhvDs%2Bv0zfHdMUYby98Qpb3LwanXtWjlvEdJI96m%2FSX5rcdrqSaPjiqqqzwKyK5NWZoM2%2BWcVmgFSsOg3fIrzIsNv12NsevrFz3kRqIKuuWrXr%2BjqViTbIYw8yaJTPdlZ7NA1vwEOVRzI47TNDmp2nO2MHxWycAliEWFnEFQBsmyMqQr2B8gloBIbrA0j98v19ts9YZ%2FZqZE86bIlOsWHOSA4u3g%2BQ0pUWtwq%2B9hF9SG1Z7gj5LJsm39fmkKUTdhJPkwBkFkFnJ8eP1u%2FXQL03UlsaxCz2%2BIVFiuKp0jDHpWdRhg%2BVcXeTgDVW5WW334olffdHxHO63mvqs8J86M5QWXEt%2Fjo9OKbtGKsC6T0xNzpSnNgUdPDS0MfxYLQUPFH9hYnNG1LKtURdXSVPlmFVSIbV4Fmf8OCrRZ34voGoAiW%2FWBhV21%2BW5AAFK5ejf7wJj5gQJm2WwFs37d%2F7PQ6%2FtXdIZavzn0XRS7e8Lh2Ag%2Fz7PlojhK80Lb7feg6vvh3OuIAO22KewxgHKP9w782FCAgg9zCZQZdiuoGIMuu7rlwSbwV%2Fs4Xg0j2En%2FvlaOERslJqjCDU%2FhwqEbP5n1rYZr4Dipcy0t0wdWt9d1F5wJDu9bXftBbQeEcFiaQVAjjD03JYltqKDhOOUc8zl48GnCqayzoxYNHDxoeH9QPRy63hWt9wTWsHIB6YZ%2FrN2zBUQSmNTcRmazDVlWw0WTsPKhxyuvwO4YdifnMnGAniE3xnTDQ6he1N3NMj4Bpt2acmPL97w4g8btxF8fslxh5LV%2BB6Ay%2FB9eSyXXax4AAA%3D%3D

let lookBackTm = ago(365d);
let TrimHtmlContent = (str:string)
{
    let content = replace("&rsquo;", "'", replace("&nbsp;", " ", str));
    let result = replace("<[^>]*>", "", content);
    result
};
let getIncidentLink = (incident:string)
{
    let link = strcat("https://portal.microsofticm.com/imp/v3/incidents/details/", incident, "/home");
    link;    
};
let getRepairItemLink = (workItemId:string)
{
    let link = strcat("https://dev.azure.com/msazure/One/_workitems/edit/", workItemId);
    link;    
};
let getSimpleTeamName = (name: string)
{
    let splitList = split(name, "\\");
    let result = iif(array_length(splitList) > 1, splitList[1], name);
    result
};
let XinyanTeamIds = dynamic(['10549', '10661', '67334', '82812', '42690', '75939', '68685', '105484', '10475', '93543', '82813', '60163', '114480', '135033']);
let RunnerTeamId = '39447';
let RunnerFrameworkPhases = dynamic(['RefreshClientTokenAsync','PreDeploymentActions']);
let DeploymentPhases = dynamic(['CreateRg','InitialDeployment','RGCreation','Redeployment','ValidateARMTemplate']);
let DeletingRgPhase = dynamic(['DeleteRG','DeleteRg']);
let ICMIDs = cluster('icmcluster').database('IcMDataWarehouse').Incidents
| where CreateDate > lookBackTm
| where CorrelationId =~ 'SDNRunners-HitCount'
// runner CP ICM
| summarize hint.num_partitions=20 hint.strategy=shuffle arg_min(ModifiedDate, *) by IncidentId
// get all orignal ICM
| where Severity == 2
// sev2 ICMs
| where OwningTeamId in (XinyanTeamIds)
| summarize by IncidentId;
// find all incidents
cluster('icmcluster').database('IcMDataWarehouse').IncidentsSnapshotV2
| where CreateDate > lookBackTm
| where IncidentId in (ICMIDs) and isempty( ParentIncidentId)
// exclude the ICM having parent
| parse Title with * 'Runner Name: ' RunnerName ' Region: ' Region  ' Instance: ' RunnerInstance ' Phase: ' Phase
| parse Title with * '[Aggregate][' * '][' AggrRegion ' / ' AggrRunnerName ' / ' AggrRunnerInstance '] ' *
// [Aggregate][azf-UDRDualStackServiceTag-CP-RNM][usdodcentral / AzNetToolsRunners.UdrNsgServiceTag / azfUdrNsgServiceTagusdodcentralProd] 50% children Unhealthy
| extend RunnerName = iif(isnotempty(RunnerName), RunnerName, AggrRunnerName), RunnerInstance = iif(isnotempty(RunnerInstance), RunnerInstance, AggrRunnerInstance), Region = iif(isnotempty(Region), Region, AggrRegion), Phase = iif(isnotempty(Phase), Phase, 'AggregatedPhase')
| extend FailureType = iif(Phase in (RunnerFrameworkPhases), "Runner Phase", iif(Phase in (DeploymentPhases), "Deployment", iif(Phase in (DeletingRgPhase), "Delete RG", iif(Phase contains "AggregatedPhase", "AggregatedPhase", "Testing Failure"))))
| join kind=leftouter
(
    cluster('icmcluster').database('IcMDataWarehouse').IncidentBugs
    // get work item
    | where CreatedDate > lookBackTm
    | where IncidentId in (ICMIDs)
    | summarize arg_max(ModifiedDate, *) by IncidentId, ExternalId
    | project ExternalId, IncidentId
)
on IncidentId
| join kind=leftouter
(
    cluster('icmcluster').database('IcMDataWarehouse').IncidentDescriptions
    // get auto-correlation
    | where Date > lookBackTm
    | where IncidentId in (ICMIDs)
    | where ChangedBy == 'IcmAutoCorrelation'
    | extend IcmAutoCorrelation = 1
    | summarize max(IcmAutoCorrelation) by IncidentId
    | project IncidentId, IcmAutoCorrelation = max_IcmAutoCorrelation
)
on IncidentId
| join kind=leftouter
(
    cluster('icmcluster').database('IcMDataWarehouse').IncidentHistory
    // find out how downgrade was made
    | where ChangeDate > lookBackTm
    | where IncidentId in (ICMIDs)
    | where ChangeCategories =~ '["Edit","SeverityDowngrade"]'
    | summarize arg_max(ChangeDate, *) by IncidentId
    | extend SeverityDowngradeType = iif(ChangedBy =~ 'CN=networking-autotriage.azure.com', 'Auto-Triage', iif(ChangedBy =~ 'Automation' or ChangedBy =~ 'gautosvc', 'Automation', 'DRI'))
    | extend SeverityDowngradeBy = iif(SeverityDowngradeType != 'DRI', SeverityDowngradeType, ChangedBy)
    | project IncidentId, SeverityDowngradeBy, SeverityDowngradeType
)
on IncidentId
| join kind=leftouter
(
    cluster('icmcluster').database('IcMDataWarehouse').RootCauses
    // find root cause
    | summarize arg_max(ModifiedDate, *) by RootCauseId
    | project RootCauseId, RCATitle = Title, RCADesscription = TrimHtmlContent(Description)
)
on RootCauseId
| join kind=leftouter
(
    cluster('aznwsdn').database('aznwmds').MetricTelemetry
    // find runner instance flavor and its subscriptionId
    | where name == 'E2ERunnersDeployMetric' and isnotempty( RunnerFlavor) and isnotempty( SubscriptionId)
    | summarize arg_max(PreciseTimeStamp, *) by RunnerInstanceName
    | project RunnerInstanceName, Region, SubscriptionId, RunnerFlavor
    | join kind=leftouter
    (
        cluster('nrp').database('test').GetLatestSimpleControlPathRunnerConfigure
    )
    on $left.RunnerInstanceName == $right.RunnerInstanceName
    | extend RunnerFlavor == iif(isnotempty( RunnerFlavor), RunnerFlavor, RunnerFlavor1), SubscriptionId = iif(isnotempty( SubscriptionId), SubscriptionId, SubscriptionId1)
    | summarize by RunnerInstanceName, RunnerFlavor, SubscriptionId
)
on $left.RunnerInstance == $right.RunnerInstanceName
| extend SubscriptionId = SubscriptionId1
| extend rawTags = parse_json(Tags)
| extend RCADesscription = iif(isnotempty( RCADesscription), TrimHtmlContent(RCADesscription), '')
| extend SeverityDowngradeBy = iif(isnotempty( SeverityDowngradeBy), SeverityDowngradeBy, 'N/A'), SeverityDowngradeType = iif(isnotempty( SeverityDowngradeType), SeverityDowngradeType, 'N/A')
| extend IcmAutoCorrelation = iif(isnotempty( IcmAutoCorrelation), IcmAutoCorrelation, 0)
| extend IsTriaged = iif(isnotempty( RootCauseId), 1, iif(array_length(rawTags) > 0, 1, 0))
// DRI triaged the ICM with any of these conditions.
| extend IsTriaged = iif(IsTriaged == 1, IsTriaged, iif(OwningTeamId == '39447', 1, 0))
// if the ICM is transfered to runner team, then it is triaged.
| extend IsTriaged = iif(IsTriaged == 1, IsTriaged, iif(HowFixed in ('Transient', 'External'), 1, 0))
// if DRI marked as Transient, it is triaged.
| extend IsTriaged = iif(IsTriaged == 1, IsTriaged, iif(isnotempty(ExternalId), 1, 0))
// if the ICM has WI associated, then it is triaged.
| extend IsTriaged = iif(IsTriaged  == 1, IsTriaged, iif(SeverityDowngradeBy != 'N/A', 1, 0))
// if ICM is downgraded by Auto-Triage, or Automation or DRI, it is triaged.
| extend ExternalIdLink = iif(isnotempty( ExternalId), getRepairItemLink(ExternalId), '')
| extend IsMissingRCA = iif(isempty(RootCauseId) and isempty(ExternalIdLink), 1, 0)
// missing RCA
| extend InactiveInDays = iif(Status =~ 'active', datetime_diff('day', now(), ModifiedDate), 0)
| extend StartOfWeek = startofweek(CreateDate)
| extend OwningTeamName = getSimpleTeamName(OwningTeamName)
| extend FinalTeamGroup = iif(OwningTeamId == RunnerTeamId, 'Runner Team', iif(OwningTeamId in (XinyanTeamIds), 'Xinyan Team', 'Other Teams')), TestPhase = iif(Phase =~ 'ValidateARMTemplate', 'ValidateARMTemplate', iif(Phase in (DeploymentPhases), 'Deployment RG', iif(Phase in (DeletingRgPhase), "Delete RG", 'Others')) )
| project IncidentId, IcmLink = getIncidentLink(IncidentId), IsMissingRCA, IsTriaged, StartOfWeek, CreateDate, ModifiedDate, MonitorId, RoutingId, OwningTenantId, OwningTenantName, OwningTeamId, OwningTeamName, OwningContactAlias, Severity, Status, InactiveInDays, Title, RootCauseId, RCATitle, RCADesscription, ResponsibleTeamName, ResponsibleTeamId, Tags, RunnerName, RunnerInstance, Region, Phase, TestPhase, RunnerFlavor, SubscriptionId, FailureType, IcmAutoCorrelation, HowFixed, Mitigation = TrimHtmlContent(Mitigation), RepairItem = ExternalId, ExternalIdLink, SeverityDowngradeBy, SeverityDowngradeType, FinalTeamGroup
| sort by CreateDate asc  