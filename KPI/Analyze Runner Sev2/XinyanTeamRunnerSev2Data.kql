https://dataexplorer.azure.com/clusters/nrp/databases/test?query=H4sIAAAAAAAAA81Ze2%2FbOBL%2FP5%2BC69tbWT05jmPn1W4KpEkfBpo0cNztAWkuYCVaZiNRPpGO697js98MqQf1cNpue0ADJOFj%2BJvhzHBmSEVMkShJ7p5R%2F24ak2NCw6Q73N8L3CdbEcxNUx6%2FUnF0mgjFhAKCrlTpY%2FjlInS3%2FrVF4AcJpWKLAUynbBFRn3U7Tscj%2Bk8xQnAE%2F8BqF%2FBxab9PJmaeyJimivxzmSgmCRUBEYnofUgZvQNWRC6ARlbY7drsfhMf5OJJyQGkabJ4NT1%2F3QJLYGdcrSvgwwo4jQ32bxn2bhMbSFgqUe4WtFEFDfeo4d53MrxhE08rog1rr4IVGaTfM6BREyhiUvbUnIo2sP0KWGjAnmZge02wEBSnWLoR76CC95fh0ZPcDTS3FquDFaIHdntoA%2F5%2B%2FY%2BnN49QvFxxBzZinNxnNlY0rPrKUQXml15PI%2FV6NtZhO5afxDEIVsUb7NiA79%2FLv9mud1QiXSRpTCP%2BmZF4GSm%2BgL2u5hxcXPszUQmhuQ70kF5nOGz9x5zBkKmx8HkAQrzm4g7PIM%2F6LQcxMiQw4VPV7cyVWsjH%2Ff4iSRWNtmPup4lMZor78TbsrM%2FjRf9%2B2M8BZT9givJI9mEr%2BSDsrD9PYtbJtoUsnmDDkhDsSXk6VizOZVwl6R32x8HXSxmw%2B236eZkyLVssdbv%2FRrD%2BLcKB3mLZZwFXKF7J4AG5rmCDEZsyGl%2FQmKFcAv4%2FJi0RbBFxULDEIKfbmhJP6fti40CWMgmGBBrOZ12apnR9GzERqnm3AHDJUzLwSsDrwY1HECyDMRC5kH%2FnYk0FSjgOJOAGayDlfvfaGezsjY4cj0Bjf3%2BAjf2D4XCEjcPdw8EuNka7%2B0c72DjYOxpq4v3D%2FcM9s2pvdDgyrdGBHjoa7o2G%2BXrd2N8Z7OvGYDAaHWqkwXBvZzh0brIUMFkKwVIjH4jnDI9GowPHnnuRwt7QGpdzKll1DxM2g%2B3OTyMOjjRN7pg4kWvhO55zmbIzOEDJGk%2FXia94ImTBtJxpwTzVQWgSAshYcMVpVJLD2OSlJgA87LDAnvsDzmIAi08m51MGngFNiyf8BaeYhJpnhaWeY5OXAJE1w2Ld%2BPR8fIYS%2BtESTm7adeBwZW3H3QZ29APgdZ2xf34GnXc0ZfNkKRlM5gdbbv0b4gJLGTGbAzoGXlSm5nI%2BSVMW6e2hPf5LnKuzC2MH2XvF1WmyhJ2SJCVTrjCqKEircsXVnHSuDR0ITE5CCOWhhiGnlzedLYhVqZ6FLm4JGMplDDkZY9ecC7UtlvHtAsC4NtXx7o4ZhpMEwobrYzlfzmbAkabhbcxF9zwJ%2BIyzAPfikUcu%2BbAm%2BX7HATKE80loFIGwPBQ0ytiafV6xe5ZCNiDHx2QXiSW730WKUlVvVgLMlXkmF6RbOUpuZQcV3k8Qb8YhVyP3IvZtfY8BrwRdyHmi%2Ftj9alOWAmnpjR%2B5uvbhErxTrbvkEngJVVK6KDr7BNIFjKg5Q42QOb3HYmahaQEeGuC%2Fxv7a8o%2BIY0xPLnT0c7KTq2MidFgIJn1ctAi0xgI8R%2FgWcT4CA%2FqAPM4bGzhe5z7Gbq4dHMB%2FOJYxcUifZAO2MNXBkukNjD%2FC3du49POs9%2FZscrak0ZUC7V6x9J77bErD3ullb3JxfnO9lEES%2BKCYFDysT04%2BXzAIREkks0Oz%2FTZIL2RYrgQigK2P2jCXaRLckL2dvxJ%2FzqMAtE7eijmjkZqvQRnsE9TKga1iky24FFDlaLuWc65nEXo1dRSThRo2IOXzjQVeiy6RyJigiabHCwLPshcM5nGxtkgP59OQQAr7BHrEcb9OJ2SjUpDwm6IZZO1Nkzj3VtyJZCU6riXZC6h6oNiYrhe5aGa3eDJb05xbMDEb73i1VfUchgvKsRbySvox1JhqyORlhdiHuxjlQpJOTdG4tZahKZOIm%2B8Qdq33%2FTEBrnAJCo4jNlPJEoKdrk7aYv3epljfxRXfk%2FieLbNKPUsHqF%2BCdZ4erEbSoBlKbaL2cJqRlJlApyf66QvpySPPwS9SyEqQquoQZbGLaT%2Bmd%2BxWMtUtV9RznQFYpMlH5qsKFwtqy90CD7VW%2FSw2OmPST%2FlCs7FtRZcq6fllPVKxxnfYKrM5XDFDFjzTFQCIF58AO6v6cTLq7Pw2CcA0g4bp0PJN0q%2B3VysbAL1tTvy09nwFd5IkXeem1IUQyELmyYoEEBfDlEJxsaISNhawFqP8INue4r6g9sPyHurY685zuNl1vE5e%2Bp3lsnRunI3HuJSopcaseEgD1or1lrOBJKcXx4IpfeMUYQ%2FdHG6LNGTl3RTvSWju3lRPOF4LCs7HxlWxHK9Ohogq7%2F0cKCOE3tlk7LjuF0RHFM2yfVO%2FHBscr33TXimM%2B4Cvt3DdAPjTufokSdQphbaseHkKw8TH8W9KCwVaIzRYMxDLT09MlXJsKmE9AsGziJ44UX1Q7Vqx1TVatJn9f9RIP4uVDERFhzgWBxLGzhk4uz%2BF0iOGVjVKZDdEnlejs4jeg2vrG4uSoM0PxW4KVZkTL3TJB275fPd5VnibWsiwc7JbT70YfKEZuI3ZqwqnzUn%2BMmU%2B3KWmPGZwP4gXhUUrBTFWmXXDNgjKmrjK3KuImsFsMts3mw5%2FuvnK0oQiXVTMp6DGg4GXTL2m2DbPXuhkaRJdUjU3MsLAjIcQw4zGwNt%2BRfm2m7tFW%2F0K1%2FJ522Q1ONnbx2XtZX1myaq2qr2BW9dtyyWhZvmmNar9QdM3Ws1fl6uKYk5mm64e1lMZwOvbqklZUqZ0BbdNrCv1nfr2o0xEF0fsW1QjrDR0XqUANdUDT5PCsS9qmzNOxRhNKndD3nAu%2BidO26SVhR%2BERrpN63P4rYfLwTqPlkKwrcLzyI6NLE3Ob3NOK3YD0sBrPhJn5sUn4h1NsePqJx3I1kRluPmzjr7mUrEmyQzHzNUvMBFje7NAVv8YORR9I07l1ey4eNC1heGzQgYuQSwq5AyCeICfK7IUoGC9h1QCIr%2Bh0jz%2BvFyvktUL%2FomZotGZIlOuH20hZ2QXK8etSYlag1N9B6ugWi3WeD9Kpm7xDmfd01ys5ipGrc4C0k5d0PKlTpJ3YxBWJj7HK%2B2f1mG7wG3HFotBPB01kTLrFgV%2FgIHRqmk93GZZmmIP1P2Qas%2B5xE9ZEFlAWi2OSqJkBfkKcq9agmpQlJTJJLpnAciz42UnKHt8sk6Pzvg%2FRv2xEQtjoiWtoL7i92wszuha5sW0FlPX52YWZMSvBQrKh1soC2ddJ6BrGBTJqgs87FrRrUaJK3yoejN7x5j5zgW9ZLaCXrd8FbbIy0OZvY01Pl11qyT2yxWHo4HjL9Nkuci2Uj%2Fl9lccr3gNxr7TEhaaj%2Bmwxgzka5w34LgGAapGTDBQdtgPhFkbdNn20cXbNPzFNzSnHCP4QebbntGM2CgxQRVuuOJn3zBrX1671jO8V%2FH3yjm0TO9Z3wCq7oI9weEargtIKBABCJu5GQQ1wth9U6fYhvJqjpP3McmDB59EnMoyZWrRwMG9mvd7xXWl7TbTuMVgISwXkIP4h9I9G4MIgZmu%2BpJbf5zOS%2Brs6bjwoYfLMc9%2BrW3P2Hk2AT1DwgzphutXOQkWhQu5%2FirctePJt1yDvdpZxC9QSaowsFrfgqj0%2FwfaNphFdyMAAA%3D%3D

let lookBackTm = ago(365d);
let TrimHtmlContent = (str:string)
{
    let step1 = replace("'", "'", replace(" ", " ", str));
    // Replace smart quotes and non-breaking spaces
    let step2 = replace("&nbsp;", " ", step1);
    // Replace HTML non-breaking space entity
    let step3 = replace("&amp;", "&", step2);
    // Replace ampersand entity
    let step4 = replace("&quot;", "\"", step3);
    // Replace quote entity
    let step5 = replace("&lt;", "<", step4);
    // Replace less-than entity
    let step6 = replace("&gt;", ">", step5);
    // Replace greater-than entity
    let step7 = replace("&#39;", "'", step6);
    // Replace single quote entity
    let step8 = replace("<[^>]*>", "", step7);
    // Remove HTML tags
    let step9 = replace("<!--[^>]*-->", "", step8);
    // Remove HTML comments
    let step10 = replace("\\s+", " ", step9);
    // Normalize multiple whitespaces to a single space
    step10
};
let getIncidentLink = (incident:string)
{
    let link = strcat("https://portal.microsofticm.com/imp/v3/incidents/details/", incident, "/home");
    link;    
};
let getRepairItemLink = (workItemId:string)
{
    let link = strcat("https://dev.azure.com/msazure/One/_workitems/edit/", workItemId);
    link;    
};
let getSimpleTeamName = (name: string)
{
    let splitList = split(name, "\\");
    let result = iif(array_length(splitList) > 1, splitList[1], name);
    result
};
let XinyanTeamIds = dynamic(['10549', '10661', '67334', '82812', '42690', '75939', '68685', '105484', '10475', '93543', '82813', '60163', '114480', '135033']);
let RunnerTeamId = '39447';
let RunnerFrameworkPhases = dynamic(['RefreshClientTokenAsync','PreDeploymentActions']);
let DeploymentPhases = dynamic(['CreateRg','InitialDeployment','RGCreation','Redeployment','ValidateARMTemplate']);
let DeletingRgPhase = dynamic(['DeleteRG','DeleteRg']);
let ICMIDs = cluster('icmcluster').database('IcMDataWarehouse').Incidents
| where CreateDate > lookBackTm
| where CorrelationId =~ 'SDNRunners-HitCount' or Title startswith "[RunnerICM Aggregation CP]"
// runner CP ICM
| summarize hint.num_partitions=20 hint.strategy=shuffle arg_min(ModifiedDate, *) by IncidentId
// get all orignal ICM
| where Severity == 2
// sev2 ICMs
| where OwningTeamId in (XinyanTeamIds)
| summarize by IncidentId;
// find all incidents
cluster('icmcluster').database('IcMDataWarehouse').IncidentsSnapshotV2
| where CreateDate > lookBackTm
| where IncidentId in (ICMIDs) and isempty( ParentIncidentId)
// exclude the ICM having parent
| parse Title with * 'Runner Name: ' RunnerName ' Region: ' Region  ' Instance: ' RunnerInstance ' Phase: ' Phase
| parse Title with * '[Aggregate][' * '][' AggrRegion ' / ' AggrRunnerName ' / ' AggrRunnerInstance '] ' *
// [Aggregate][azf-UDRDualStackServiceTag-CP-RNM][usdodcentral / AzNetToolsRunners.UdrNsgServiceTag / azfUdrNsgServiceTagusdodcentralProd] 50% children Unhealthy
| extend RunnerName = iif(isnotempty(RunnerName), RunnerName, AggrRunnerName), RunnerInstance = iif(isnotempty(RunnerInstance), RunnerInstance, AggrRunnerInstance), Region = iif(isnotempty(Region), Region, AggrRegion), Phase = iif(isnotempty(Phase), Phase, 'AggregatedPhase')
| extend RunnerName = iif(isnotempty( RunnerName), RunnerName, iif(Title startswith "[RunnerICM Aggregation CP]", "RunnerICM Aggregation CP", "Unknown"))
| extend FailureType = iif(Phase in (RunnerFrameworkPhases), "Runner Phase", iif(Phase in (DeploymentPhases), "Deployment", iif(Phase in (DeletingRgPhase), "Delete RG", iif(Phase contains "AggregatedPhase", "AggregatedPhase", "Testing Failure"))))
| join kind=leftouter
    hint.num_partitions=50 hint.strategy=shuffle (     cluster('icmcluster').database('IcMDataWarehouse').IncidentBugs
    // get work item
    | where CreatedDate > lookBackTm
    | where IncidentId in (ICMIDs)
    | summarize arg_max(ModifiedDate, *) by IncidentId, ExternalId
    | summarize RepairItems = make_set(ExternalId) by IncidentId
    | project IncidentId, RepairItems
)
on IncidentId
| join kind=leftouter
    hint.num_partitions=50 hint.strategy=shuffle (     cluster('icmcluster').database('IcMDataWarehouse').IncidentDescriptions
    // get auto-correlation
    | where Date > lookBackTm
    | where IncidentId in (ICMIDs)
    | where ChangedBy == 'IcmAutoCorrelation'
    | extend IcmAutoCorrelation = 1
    | summarize max(IcmAutoCorrelation) by IncidentId
    | project IncidentId, IcmAutoCorrelation = max_IcmAutoCorrelation
)
on IncidentId
| join kind=leftouter
    hint.num_partitions=50 hint.strategy=shuffle (     cluster('icmcluster').database('IcMDataWarehouse').IncidentHistory
    // find out how downgrade was made
    | where ChangeDate > lookBackTm
    | where IncidentId in (ICMIDs)
    | where ChangeCategories =~ '["Edit","SeverityDowngrade"]'
    | summarize arg_max(ChangeDate, *) by IncidentId
    | extend SeverityDowngradeType = iif(ChangedBy =~ 'CN=networking-autotriage.azure.com', 'Auto-Triage', iif(ChangedBy =~ 'Automation' or ChangedBy =~ 'gautosvc', 'Automation', 'DRI'))
    | extend SeverityDowngradeBy = iif(SeverityDowngradeType != 'DRI', SeverityDowngradeType, ChangedBy)
    | project IncidentId, SeverityDowngradeBy, SeverityDowngradeType
)
on IncidentId
| join kind=leftouter
    hint.num_partitions=50 hint.strategy=shuffle (     cluster('icmcluster').database('IcMDataWarehouse').RootCauses
    // find root cause
    | summarize arg_max(ModifiedDate, *) by RootCauseId
    | project RootCauseId, RCATitle = Title, RCADesscription = TrimHtmlContent(Description)
)
on RootCauseId
| join kind=leftouter
    hint.num_partitions=50 hint.strategy=shuffle (     cluster('aznwsdn').database('aznwmds').MetricTelemetry
    // find runner instance flavor and its subscriptionId
    | where name == 'E2ERunnersDeployMetric' and isnotempty( RunnerFlavor) and isnotempty( SubscriptionId)
    | summarize arg_max(PreciseTimeStamp, *) by RunnerInstanceName
    | project RunnerInstanceName, Region, SubscriptionId, RunnerFlavor
    | join kind=leftouter
        hint.num_partitions=50 hint.strategy=shuffle     (         cluster('nrp').database('test').GetLatestSimpleControlPathRunnerConfigure)
    on $left.RunnerInstanceName == $right.RunnerInstanceName
    | extend RunnerFlavor == iif(isnotempty( RunnerFlavor), RunnerFlavor, RunnerFlavor1), SubscriptionId = iif(isnotempty( SubscriptionId), SubscriptionId, SubscriptionId1)
    | summarize by RunnerInstanceName, RunnerFlavor, SubscriptionId
)
on $left.RunnerInstance == $right.RunnerInstanceName
| extend SubscriptionId = SubscriptionId1
| extend rawTags = parse_json(Tags)
| extend RCADesscription = iif(isnotempty( RCADesscription), TrimHtmlContent(RCADesscription), '')
| extend SeverityDowngradeBy = iif(isnotempty( SeverityDowngradeBy), SeverityDowngradeBy, 'N/A'), SeverityDowngradeType = iif(isnotempty( SeverityDowngradeType), SeverityDowngradeType, 'N/A')
| extend IcmAutoCorrelation = iif(isnotempty( IcmAutoCorrelation), IcmAutoCorrelation, 0)
| extend IsTriaged = iif(isnotempty( RootCauseId), 1, iif(array_length(rawTags) > 0, 1, 0))
// DRI triaged the ICM with any of these conditions.
| extend IsTriaged = iif(IsTriaged == 1, IsTriaged, iif(OwningTeamId == '39447', 1, 0))
// if the ICM is transfered to runner team, then it is triaged.
| extend IsTriaged = iif(IsTriaged == 1, IsTriaged, iif(HowFixed in ('Transient', 'External'), 1, 0))
// if DRI marked as Transient, it is triaged.
| extend IsTriaged = iif(IsTriaged == 1, IsTriaged, iif((isempty( RepairItems) or array_length( RepairItems) == 0), 1, 0))
// if the ICM has WI associated, then it is triaged.
| extend IsTriaged = iif(IsTriaged  == 1, IsTriaged, iif(SeverityDowngradeBy != 'N/A', 1, 0))
// if ICM is downgraded by Auto-Triage, or Automation or DRI, it is triaged.
| extend IsMissingRCA =  iif(tolower(Status) != 'resolved', 0, iif(isempty(RootCauseId) and (isempty( RepairItems) or array_length( RepairItems) == 0), 1, 0))
// missing RCA
| extend InactiveInDays = iif(Status =~ 'active', datetime_diff('day', now(), ModifiedDate), 0)
| extend StartOfWeek = startofweek(CreateDate)
| extend OwningTeamName = getSimpleTeamName(OwningTeamName)
| extend FinalTeamGroup = iif(OwningTeamId == RunnerTeamId, 'Runner Team', iif(OwningTeamId in (XinyanTeamIds), 'Xinyan Team', 'Other Teams')), TestPhase = iif(Phase =~ 'ValidateARMTemplate', 'ValidateARMTemplate', iif(Phase in (DeploymentPhases), 'Deployment RG', iif(Phase in (DeletingRgPhase), "Delete RG", 'Others')) )
| project IncidentId, IcmLink = getIncidentLink(IncidentId), IsMissingRCA, IsTriaged, StartOfWeek, CreateDate, ModifiedDate, MonitorId, RoutingId, OwningTenantId, OwningTenantName, OwningTeamId, OwningTeamName, OwningContactAlias, Severity, Status, InactiveInDays, Title, RootCauseId, RCATitle, RCADesscription, ResponsibleTeamName, ResponsibleTeamId, Tags, RunnerName, RunnerInstance, Region, Phase, TestPhase, RunnerFlavor, SubscriptionId, FailureType, IcmAutoCorrelation, HowFixed, Mitigation = TrimHtmlContent(Mitigation), tostring(RepairItems), SeverityDowngradeBy, SeverityDowngradeType, FinalTeamGroup
| sort by CreateDate asc  