https://dataexplorer.azure.com/clusters/aznwsdn/databases/aznwmds?query=H4sIAAAAAAAAA81Z6XLbOBL%2B76fAaGeHYpayLEt27GScKsfOoarYccnKZKscrwshIQkxCWoJyI6yR%2B1r7Ovtk2w3wAMgKWcymR%2BTqshgo%2Fn1iUYDjJkicZrePqfh7TQhR4TO0%2B5wfy%2Fyn27FMDfNePJaJfFJKhQTChi6UmVP4D8Xc3%2FrH1sE%2FiGjVGw5gOmMLWMasm7nf%2F%2F5bycgHQ9%2BShpBCv7A%2B77%2FlPT7ZGLmiExopsjfV6liklAREZGK3seM0VsQROQSeCSIcuTt2vJ%2BEh%2Fl8mklANRxJbyenr1pQSVgFldrB3joANPE4P6U4%2B66uDDNMokqtyCNHCQ0T0N96ORYQxdL29%2BGs%2BfgxAbl5xxk5ILETMqeWlDRBrTvAM0N0LMcaM8FmoOjFMs2Yj12sP40PHxaRFxLqgUYPB4%2FYOGBDfbz1d%2BeXT9CtQpHPS7QkvQuj6Wic%2BlAHDoQP%2FR6GqXXs3EOmjhhmiSgkIs12LHBPnyQf7FT69CgnKdZQmP%2BhZFkFSu%2BBPvuFxwy2KSrSgkt7NYkLcGgb%2F3LLLA5U2MR8ggUeMPFLS4wnj%2B3rLLYsMBESFW3s1BqKZ%2F0%2B8s0UzTeTniYpTKdKR4m22BVnyfL%2Ft2wXwDKfsQU5bHsgxkFEazqL9KEdWDFazEg4ikOLA0hhpRnY8WSQsf7NLvF53H067WM2N02%2FbLKmNYtkXrcfytY%2FwbhwG%2BJ7LOIK1SvEvCAXpdgYMymjCbnNGGol4C%2FT0hLeVrGHBwssYLpsebElfihNBzYMiYhkMDD%2BaxLs4yub2Im5mrRLQF88owMggrwanAdEATLYQxEoeRfuVhTgRqOIwm40RpYedi98gY7e6NDLyAw2N8f4GD%2F8XA4wsHB7sFgFwej3f3DHRw83jscaub9g%2F2DPfPW3uhgZEajx5p0ONwbDYv39WB%2FZ7CvB4PBaHSgkQbDvZ3h0LvO6%2FtkJQTLjH6gnjc8HI0ee%2Fbcywxsw2hcLKhkrg0TNgNzFycxh0SaprdMHMu1CL3Au8jYKSyedI0r6zhUPBWyFFrNtGCe6KIzmQPIWHDFaVyxA23ySjMAHj6wyJ77BdZiBC8fT86mDDIDhpZM%2BIWkmMy1TEeknmOTVwCRD%2Bfle%2BOTs%2FEpahjGK1i5WdeDxZWPPX8bxNGPgNf1xuHZKTy8pxlbpCvJYLJY2HLrn1AXWMaIMQ74GGRRte9W82mWsVibh%2FH4N%2FEuT89NHGTvNVcn6QosJWlGplxhVVGwa8p7rhakc2X4QGFyPIfSPdcw5OTiurMFtSrTs%2FCIJoFAuUpgy8XateBCbYtVcrMEMK5DdbS7Y8iwkkDZ%2BfpILlazGUik2fwm4aJ7lkZ8xlmEtgTkkU8%2Brklh7zhCgbA%2BCY1jUJbPBY1zscbOS3bHMtgByNER2UVmye52kaNy1dt7AeHKM5ML0nWWku9Y4Mh%2BingzDvsxSi9r39b3BPBS0KVcpOqX3V8dykohrb3JI1%2B3NlxCdqp1l1yALKEqTh9VZ59Bu4gRtWDoEbKgd9isLDUvwMMA8tfEX0f%2BEfFM6Mm5rn5evnJ1TYQHNoeQPilHBEZjAZkjQou5oABBL5AnxWCDxKsix9j1lYcE%2FIO0XIhH%2BiQn2Mq4xEroNdAfofU2Lv0y6707nZyuaHypwLuXLLvjIZvSee%2Fkojc5P7u%2BWskojUJwTAYZ1ifHX84ZFKI0lvmi2X4XZedyXr0JTABbp9owF1kaXZO9nT%2BTcMHjCLxO3okFo7FarMEZ7DM0wpHtYrNbcCmgs9Fxreb8wGIMau4oJ0s3bEAq5hsvBC2%2BRCYTgiaappcMgRUvIBZ1sfaSJhfTsIGU8Yk0xfN%2FnU%2FIRqcg4zdVM9i1N03i3DtxK9J70fEtzV5C1wPNxnS9LFQz1uLKbN3m%2FFKIMbwT1N6q72H4QkVrYXe2H8ONWw2ZvHKYQzhoUS4k6dQcjaa1kKZMIm5hIVit7f6UglQ45ERHMZupdAXFrrXO722o81td3cx8R818vsq783wrQN8S7PE00a2iUbOM2kztpTRnqXYBvTXRz1%2FZmgLyAnIigx0JtikDsczSTyxU1kRg72X%2BFuSW9fxH8O4pk2HGl1qM7WW6UmkvrLoIx4%2Ff4eU8WnAQnLPoud63Qb3kGMRZPYuXc%2BerrskAi2%2FQiBvGrMla7yjcUNnxbBUDoDfNiT9kLF%2FDKSLN1kUYdesCepBFek8iqGTzjEI7cE8lGBWxloD8TnE9QbugW8OGHDrPq84LOIt1gk7RrJ0WunSuvY2Lr9KopSt0sqMBa1VnK9FAk5PzI8GUPiOKeQ9THM53dM6q0ySebDDUvame8IIWFJxPTJpiA%2B1OzhFV3oUFUM4IT6eTsef7X1EdUbTIdqN%2BODI4QbvRQaWM%2F0Cet0jdAPiHSvNJmqoTCmPpZHgGZBIi%2FZsKeYnWKAnWDDQYJ8empzgyfaumQNEsqyZOuHebXaum%2BsaDtrDf34X0i7iXkXD8h7QkkkA7Y5Dk4RSahARGbnXIz3K86BtnMb2DlNZnCyXBkx9LS0o3mZUudHMG6fhi90XeIpuuxYjz8vNJvW17qQX4jdlLR9LmLfkiYyGceqY8YdDJJ8symk7riv1gPagNhqp7dYUHjqo5zHeHDGFM2JzQiWzphE1BFwaEV0y9oTg2F1OYWFkaX1C1MLoBYcbnULM0onEXpNmPqNx201QM1I9wel60TboVybYdX2vvvvMwuq5ynwZ%2B3bEtvXwt7M1QuM%2BDZmK0xr6ul4tilmSbrx72U1W162bVtKw4M3oPh0K89dFH35tPMhVdpNiHnUY9afjc5QA31StOk8Ozz1ObtxknGE0uf8Nm4Z33j722SWvrfRAa%2BTa9X8BvPdz%2F1WW0dH5tLV1AdmxkaTb6tuS0ijYgDYLmXW4eXrzJ3dEcO76%2BeYEtmqgct7h90adRKtYknSHNnNAiUza2NytkPR%2BhhPLZqONcbh2V9662MnxW6sAlqEWFnEEFj%2FCrQl7%2FFbwfIJeAsm%2B4tIzfrtfr9P4l%2F8xMp%2BhNUSjXd6uwYeSHI8%2BvaYleg1V9C29Bi1q%2BE%2FxeOlmxrQ5odSWqyzJJ3o9BEZmGHE%2BWv9k%2F7cq0LUns7jDzayrlkSs7%2BAiLntWkBtiFVr0mPoErN7utMj7%2FCFNPfMc7ja82rvOcOjOWZ1zidyqoRyVufmVkLSbn7rIZCjQ7MThY%2Bix4QUPF79hYnNK1LBplRdXKHDTMLLgP7%2B4VtAg30PbNul5E10AU6X0XRNi9oO8Wg0u8Nno7e8%2BY%2BeoET%2BnsHp661R2txV6tvfymqvEhqeuy2PdIHExG%2BqssXS1zU%2BqL2f6mEpR3s%2Fjstaz%2B5tU2vGMIxTveW8hhgwCdIe4j0GLY13X5GHzZ9gkk2ET%2B6o2WV9EIfh75tkstozZqTNCFG47ueTLXvoN2rUvxwElQZ0laoQ%2BsG3k3XfBJcDhi6yYRmkAAwmERBkGNMvazaUfsQAW1xCmecS%2BHDD6OOZXVzqhVgwQPatkflMeRttNK45SCza5cwlbDP1bp2SAiBG5o7r1q%2Faq4aJvzi9wyhx7uugL77rR9Yy42DfAz7ItzuuF4VU3qG%2BiiNgGnfe%2FmVrlvOfQGtdWJX4jSTGHVtb7VUBn%2BH4%2BAWq%2F0IgAA

let lookBackTm = ago(365d);
let TrimHtmlContent = (str:string)
{
    let step1 = replace("â€™", "'", replace(" ", " ", str)); // Replace smart quotes and non-breaking spaces   
    let step2 = replace("&nbsp;", " ", step1); // Replace HTML non-breaking space entity
    let step3 = replace("&amp;", "&", step2); // Replace ampersand entity
    let step4 = replace("&quot;", "\"", step3); // Replace quote entity
    let step5 = replace("&lt;", "<", step4); // Replace less-than entity
    let step6 = replace("&gt;", ">", step5); // Replace greater-than entity
    let step7 = replace("&#39;", "'", step6); // Replace single quote entity
    let step8 = replace("<[^>]*>", "", step7); // Remove HTML tags
    let step9 = replace("<!--[^>]*-->", "", step8); // Remove HTML comments
    let step10 = replace("\\s+", " ", step9); // Normalize multiple whitespaces to a single space
    step10
};
let getIncidentLink = (incident:string)
{
    let link = strcat("https://portal.microsofticm.com/imp/v3/incidents/details/", incident, "/home");
    link;    
};
let getRepairItemLink = (workItemId:string)
{
    let link = strcat("https://dev.azure.com/msazure/One/_workitems/edit/", workItemId);
    link;    
};
let getSimpleTeamName = (name: string)
{
    let splitList = split(name, "\\");
    let result = iif(array_length(splitList) > 1, splitList[1], name);
    result
};
let XinyanTeamIds = dynamic(['10549', '10661', '67334', '82812', '42690', '75939', '68685', '105484', '10475', '93543', '82813', '60163', '114480', '135033']);
let RunnerTeamId = '39447';
let RunnerFrameworkPhases = dynamic(['RefreshClientTokenAsync','PreDeploymentActions']);
let DeploymentPhases = dynamic(['CreateRg','InitialDeployment','RGCreation','Redeployment','ValidateARMTemplate']);
let DeletingRgPhase = dynamic(['DeleteRG','DeleteRg']);
let ICMIDs = cluster('icmcluster').database('IcMDataWarehouse').Incidents
| where CreateDate > lookBackTm
| where CorrelationId =~ 'SDNRunners-HitCount' or Title startswith "[RunnerICM Aggregation CP]"
// runner CP ICM
| summarize hint.num_partitions=20 hint.strategy=shuffle arg_min(ModifiedDate, *) by IncidentId
// get all orignal ICM
| where Severity == 2
// sev2 ICMs
| where OwningTeamId in (XinyanTeamIds)
| summarize by IncidentId;
// find all incidents
cluster('icmcluster').database('IcMDataWarehouse').IncidentsSnapshotV2
| where CreateDate > lookBackTm
| where IncidentId in (ICMIDs) and isempty( ParentIncidentId)
// exclude the ICM having parent
| parse Title with * 'Runner Name: ' RunnerName ' Region: ' Region  ' Instance: ' RunnerInstance ' Phase: ' Phase
| parse Title with * '[Aggregate][' * '][' AggrRegion ' / ' AggrRunnerName ' / ' AggrRunnerInstance '] ' *
// [Aggregate][azf-UDRDualStackServiceTag-CP-RNM][usdodcentral / AzNetToolsRunners.UdrNsgServiceTag / azfUdrNsgServiceTagusdodcentralProd] 50% children Unhealthy
| extend RunnerName = iif(isnotempty(RunnerName), RunnerName, AggrRunnerName), RunnerInstance = iif(isnotempty(RunnerInstance), RunnerInstance, AggrRunnerInstance), Region = iif(isnotempty(Region), Region, AggrRegion), Phase = iif(isnotempty(Phase), Phase, 'AggregatedPhase')
| extend RunnerName = iif(isnotempty( RunnerName), RunnerName, iif(Title startswith "[RunnerICM Aggregation CP]", "RunnerICM Aggregation CP", "Unknown"))
| extend FailureType = iif(Phase in (RunnerFrameworkPhases), "Runner Phase", iif(Phase in (DeploymentPhases), "Deployment", iif(Phase in (DeletingRgPhase), "Delete RG", iif(Phase contains "AggregatedPhase", "AggregatedPhase", "Testing Failure"))))
| join kind=leftouter hint.num_partitions=50 hint.strategy=shuffle
(
    cluster('icmcluster').database('IcMDataWarehouse').IncidentBugs
    // get work item
    | where CreatedDate > lookBackTm
    | where IncidentId in (ICMIDs)
    | summarize arg_max(ModifiedDate, *) by IncidentId, ExternalId
    | project ExternalId, IncidentId
)
on IncidentId
| join kind=leftouter hint.num_partitions=50 hint.strategy=shuffle
(
    cluster('icmcluster').database('IcMDataWarehouse').IncidentDescriptions
    // get auto-correlation
    | where Date > lookBackTm
    | where IncidentId in (ICMIDs)
    | where ChangedBy == 'IcmAutoCorrelation'
    | extend IcmAutoCorrelation = 1
    | summarize max(IcmAutoCorrelation) by IncidentId
    | project IncidentId, IcmAutoCorrelation = max_IcmAutoCorrelation
)
on IncidentId
| join kind=leftouter hint.num_partitions=50 hint.strategy=shuffle
(
    cluster('icmcluster').database('IcMDataWarehouse').IncidentHistory
    // find out how downgrade was made
    | where ChangeDate > lookBackTm
    | where IncidentId in (ICMIDs)
    | where ChangeCategories =~ '["Edit","SeverityDowngrade"]'
    | summarize arg_max(ChangeDate, *) by IncidentId
    | extend SeverityDowngradeType = iif(ChangedBy =~ 'CN=networking-autotriage.azure.com', 'Auto-Triage', iif(ChangedBy =~ 'Automation' or ChangedBy =~ 'gautosvc', 'Automation', 'DRI'))
    | extend SeverityDowngradeBy = iif(SeverityDowngradeType != 'DRI', SeverityDowngradeType, ChangedBy)
    | project IncidentId, SeverityDowngradeBy, SeverityDowngradeType
)
on IncidentId
| join kind=leftouter hint.num_partitions=50 hint.strategy=shuffle
(
    cluster('icmcluster').database('IcMDataWarehouse').RootCauses
    // find root cause
    | summarize arg_max(ModifiedDate, *) by RootCauseId
    | project RootCauseId, RCATitle = Title, RCADesscription = TrimHtmlContent(Description)
)
on RootCauseId
| join kind=leftouter hint.num_partitions=50 hint.strategy=shuffle
(
    cluster('aznwsdn').database('aznwmds').MetricTelemetry
    // find runner instance flavor and its subscriptionId
    | where name == 'E2ERunnersDeployMetric' and isnotempty( RunnerFlavor) and isnotempty( SubscriptionId)
    | summarize arg_max(PreciseTimeStamp, *) by RunnerInstanceName
    | project RunnerInstanceName, Region, SubscriptionId, RunnerFlavor
    | join kind=leftouter hint.num_partitions=50 hint.strategy=shuffle
    (
        cluster('nrp').database('test').GetLatestSimpleControlPathRunnerConfigure
    )
    on $left.RunnerInstanceName == $right.RunnerInstanceName
    | extend RunnerFlavor == iif(isnotempty( RunnerFlavor), RunnerFlavor, RunnerFlavor1), SubscriptionId = iif(isnotempty( SubscriptionId), SubscriptionId, SubscriptionId1)
    | summarize by RunnerInstanceName, RunnerFlavor, SubscriptionId
)
on $left.RunnerInstance == $right.RunnerInstanceName
| extend SubscriptionId = SubscriptionId1
| extend rawTags = parse_json(Tags)
| extend RCADesscription = iif(isnotempty( RCADesscription), TrimHtmlContent(RCADesscription), '')
| extend SeverityDowngradeBy = iif(isnotempty( SeverityDowngradeBy), SeverityDowngradeBy, 'N/A'), SeverityDowngradeType = iif(isnotempty( SeverityDowngradeType), SeverityDowngradeType, 'N/A')
| extend IcmAutoCorrelation = iif(isnotempty( IcmAutoCorrelation), IcmAutoCorrelation, 0)
| extend IsTriaged = iif(isnotempty( RootCauseId), 1, iif(array_length(rawTags) > 0, 1, 0))
// DRI triaged the ICM with any of these conditions.
| extend IsTriaged = iif(IsTriaged == 1, IsTriaged, iif(OwningTeamId == '39447', 1, 0))
// if the ICM is transfered to runner team, then it is triaged.
| extend IsTriaged = iif(IsTriaged == 1, IsTriaged, iif(HowFixed in ('Transient', 'External'), 1, 0))
// if DRI marked as Transient, it is triaged.
| extend IsTriaged = iif(IsTriaged == 1, IsTriaged, iif(isnotempty(ExternalId), 1, 0))
// if the ICM has WI associated, then it is triaged.
| extend IsTriaged = iif(IsTriaged  == 1, IsTriaged, iif(SeverityDowngradeBy != 'N/A', 1, 0))
// if ICM is downgraded by Auto-Triage, or Automation or DRI, it is triaged.
| extend ExternalIdLink = iif(isnotempty( ExternalId), getRepairItemLink(ExternalId), '')
| extend IsMissingRCA = iif(isempty(RootCauseId) and isempty(ExternalId), 1, 0)
// missing RCA
| extend InactiveInDays = iif(Status =~ 'active', datetime_diff('day', now(), ModifiedDate), 0)
| extend StartOfWeek = startofweek(CreateDate)
| extend OwningTeamName = getSimpleTeamName(OwningTeamName)
| extend FinalTeamGroup = iif(OwningTeamId == RunnerTeamId, 'Runner Team', iif(OwningTeamId in (XinyanTeamIds), 'Xinyan Team', 'Other Teams')), TestPhase = iif(Phase =~ 'ValidateARMTemplate', 'ValidateARMTemplate', iif(Phase in (DeploymentPhases), 'Deployment RG', iif(Phase in (DeletingRgPhase), "Delete RG", 'Others')) )
| project IncidentId, IcmLink = getIncidentLink(IncidentId), IsMissingRCA, IsTriaged, StartOfWeek, CreateDate, ModifiedDate, MonitorId, RoutingId, OwningTenantId, OwningTenantName, OwningTeamId, OwningTeamName, OwningContactAlias, Severity, Status, InactiveInDays, Title, RootCauseId, RCATitle, RCADesscription, ResponsibleTeamName, ResponsibleTeamId, Tags, RunnerName, RunnerInstance, Region, Phase, TestPhase, RunnerFlavor, SubscriptionId, FailureType, IcmAutoCorrelation, HowFixed, Mitigation = TrimHtmlContent(Mitigation), RepairItem = ExternalId, ExternalIdLink, SeverityDowngradeBy, SeverityDowngradeType, FinalTeamGroup
| sort by CreateDate asc  