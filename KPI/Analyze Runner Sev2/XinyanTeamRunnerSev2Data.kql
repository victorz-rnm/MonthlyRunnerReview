https://dataexplorer.azure.com/clusters/icmcluster/databases/IcmDataWarehouse?query=H4sIAAAAAAAAA70Za3PbOO57fgXPs3eyO0ocx06atpfOpE6bemaTZhx3ezPZXIaVaJmNRHlFOq57j99%2BAKkHKclpu929zMQmQRAAARAA4ZgpEqfp%2FSsa3M8SckJolHaHR4dh78VODGuzjCdvVRKPU6GYUIDQlSp7Dv9cRL2df%2B0Q%2BEPEoETI2DKmAet2%2FpbJ31bpi45POh58VHDxUS41mMAHkOoBs4JOxuQqdsj8%2FeafL2%2BfvER8%2BM%2F55DsM9s5%2FjLARUxMR8BDWf%2BbiHoXl%2BbxF4tigwEJAVbezUGopn%2Ff7yzRTNN5LeJClMp0rHiR7QZr0ebLsPwz7BUHZD5miPJZ9EKoAgoj9RZqwTnEgYPECB5aEU7akPJsolhQyrtPsHueT8NulDNnDHv2yypiWLZF63H8nWP8OyXEgJ%2Fss5ArFqxg8Itc1HDBmM0aTS5owlEvA93PSFEkuYw4KlmglPdaYcPZff%2B20WZLzeZdmGd3cxUxEatEtCfTISzLwK4I3g1ufILFW8%2F6Diw0VKOEklEA33AAqD7o33mD%2FcPTM8wkMjo4GODh6OhyOcHB8cDw4wMHo4OjZPg6eHj4bauSj46PjQ7PrcHQ8MqPRUw16NjwcDYv9enC0PzjSg8FgNDrWlAbDw%2F3h0LvN78p0JQTLjHwgnjd8Nho99ey1NxmcDa1xtaCSuWeYsjkcdzGOOTjSLL1n4lRuROD53lXGzuAypJsEVk4DxVMhS6bVSgvNccaoYtMIiEwEV5zGFTrApucaAejhhIX22i805iFsPp1ezBh4BgwtnvAJTjGNNE%2BHpV5j03MgkQ%2Bjct9kfDE5QwmDeCUVy7oeXK587PX2gB39CPS63iS4OIPJB5qxRbqSDBaLiy13%2Fk3WC5YxYg4HeAy8qIph1XqaZSzWx0N7%2FJd412eXxg5y9y1X43QFJ93p90mmgWR8hRLCfrlKEprxL4wsuFB7YpXcLWmmuNb8ycG%2BAcPFAN7R5kQuVvN5zAjNoruEi%2B5FGvI5ZyGK5pMnPfJxQwrxJyEyhOtGaByTNOORoHHO1oh9zR5YxtWGnJyQA0SW7OEAMaqTv1sL0H7uaFyQrnMzes4JHN4vkN6ci1BzL0PZzo%2FY41rQpVyk6peDb7ZMJZCW3rhFj1CQi0twNrXpkivgJVSF2YNwAMKzzyBfyIhaMNQJWdAHUAVZamxgAANwyBlXYI81VwvyhHjG5uRShzMvv4o6yMGERWDU5%2BWIwGgipKIisJALCAC0xz8vBls43pxGUcYiUMDtjYcA%2FEJYzsQjfZIDbGFcYMX0FuBP0HQ2Xfplvvv%2BbHq2ovG1Av1es%2ByBB2xGo93x1e708uL2ZiXDNAxAMRn4WJ%2BcfrlkEFnSWOa3YO99mF3KqNoJSEC2DrXJXGVpeEsO9%2F9KggWPQ9A6eS8WjMZqsQFlsM%2BQnENbxSb8cylSZSxbrfV8C9GvqaNcLNWwhVKx3tjgt%2BgSkYwJmtQ0vETwLXsBsAh0tU0aXCxDRijtE2qI16t08gaKBcjRs82yoGNo4g1ozQ5AtpO7rgZgneHsqod%2B3FDBWtCdqG2wMUKT6bmDjCUW5UKSTu04WIK1gGZMIt3ihJ0e%2FMG5P6XA9R6CzUnM5ipdQVDZ6eq0%2FgPh5tUqkppGHkVRXQSrHQ10A1DYjEA2UnsUylGqAKqjOv38lajuk9dg5gyCOUR4Q2KZpZ9YoKwF304DvR3wQmv%2BJynsjMkg40udumzF0ZVKd4MqRTqq%2BQHF5QZYUBGx8JXOYiBecgrsrITs5dj53WgiwBUZNEyBZmii1vOrq33bRK1sgOhdc%2BH%2FZZ63UPWm2aawjM7NQJos0jUJ07WIMgrZbk0lyBmyFh3%2FQaYaYykD5QgWkFAp3XRew9uh43eKauSskKVz6229IpVELWWPY%2FAGWSssWr4DkowvTwRT%2Bk0jol30WniP0IhVrx%2BsxNF6uzO94PktVHA9MZ4HRRdxFyOkKh%2BCglCOCLOz6cTr9b4iOlLRLNsP9ZcTQ8dvP7RfCdN7xHVbuG4h%2BGd77jRN1ZjCWDpOmwGYBAj%2FrghaUmtcXGsFcvL41FRYJ6bS0hAIbWVswwW3VdG1Il%2FPKMVm9k1aoV%2FEWobCUQnCklAC7IKBKwYzyKEJjNw7nD8peFG8zGP6AI6nS1wlQTkfS%2BHKk5v7KHTVBE7z%2BuB1XqeZpG7YeXmZXJYgxdNSM%2Bg1Vq8dTtvTGzwyAyi%2BZzxhUE4my9JATv2ElVndTg2EqoRymfuOqDmZNivgirGEYw2RLR1LKKg7AHDO1M8Ux6aDgebP0viKqoVhB4A5jyBYaIpGA%2BAMPyG%2Fvab0qPuf4F22aFt0Q4F9HNxWKw5dy7ind2eDXl1XzVKzbsmmdt35oGnrVnPW5XKpmIvTpqvH9VSFy%2FqxalJWmBldw2MD2wP6SXX3SaaiixCriG7e%2BobOXQxQUz0uNDE8u07fHt8dYzSxeluitHfZP%2FXaFq2c9yhpxNu2vyC%2F83gtVefRUkW1lUc%2B2bcpS5Nh25zTCq1AaeA3m365ebHlt68x9iGzQriE3EhUTrd41et3NBUbks4RZt4koem%2F7G0XyJqfIIdybsRx2iYnZYPOFobPSxm4BLGokHMIyiBZWoR0Bft9xBIQyQ2W5vH75Xqbrt%2Fwz8yUaN4MmXLdhIMckL8dvF5NStQa3Op72AW1YbnH%2F6NksmxbvV%2FqQlRNGEk%2BTEAQmQYcH16%2FWz%2FtwrRdSSyr0PNrIuWWK0vnEIOeVR36WP5VRR7OQJXb1VYdPu%2FW1x3f0U6jve8qz4kzE3nBpcT3%2BPi0pJu3IqzL5HTFXGnM2vaq0y56v45Zlc9aoajPxAiIMdWSW9BA8Qc2EWd0I4vSV1G1Mk8HswpksHusoJy4g6pv3vVCugGgSNdd0IRdCvbcKAOkMvVu%2FoEx87sHzNL5Gmbdqq1ooVeXOm83NX7K6LoodkuGgy4Rfp6lq2V%2BlHqUsLv6ftlMxLnXElaa3VjYYwDFHu8dXA5DAapITFBQu9j9pXwMumxrwvvbwF9tDnkVjGCD%2Fvv6Q0ZslJigCre8r%2FNbUvslrmv1cX3H8527bpnet5rIrrvgTHB4NOuCEgpGIITDwgyCGmHsualzbEP5Nccp5lgkgAefxpzKKuVq0cDB%2FZr3%2B%2BVrpO2x0nikYGEsl5DD%2BMfKPRtAJIGZ0u2O1nubRYmddx5LH3q8nPPtNmR7xi%2ByEegZEm5Et7yuqkXdMi2CHmDa%2FS43YH3PM9av3U78USPNFIZz6%2BcFKoP%2FARiHENnCHgAA

let lookBackTm = ago(365d);
let TrimHtmlContent = (str:string)
{
    let content = replace("&rsquo;", "'", replace("&nbsp;", " ", str));
    let result = replace("<[^>]*>", "", content);
    result
};
let getIncidentLink = (incident:string)
{
    let link = strcat("https://portal.microsofticm.com/imp/v3/incidents/details/", incident, "/home");
    link;    
};
let getRepairItemLink = (workItemId:string)
{
    let link = strcat("https://dev.azure.com/msazure/One/_workitems/edit/", workItemId);
    link;    
};
let getSimpleTeamName = (name: string)
{
    let splitList = split(name, "\\");
    let result = iif(array_length(splitList) > 1, splitList[1], name);
    result
};
let XinyanTeamIds = dynamic(['10549', '10661', '67334', '82812', '42690', '75939', '68685', '105484', '10475', '93543', '82813', '60163', '114480', '135033']);
let RunnerTeamId = '39447';
let RunnerFrameworkPhases = dynamic(['RefreshClientTokenAsync','PreDeploymentActions']);
let DeploymentPhases = dynamic(['CreateRg','InitialDeployment','RGCreation','Redeployment','ValidateARMTemplate']);
let DeletingRgPhase = dynamic(['DeleteRG','DeleteRg']);
let ICMIDs = cluster('icmcluster').database('IcMDataWarehouse').Incidents
| where CreateDate > lookBackTm
| where CorrelationId =~ 'SDNRunners-HitCount'
// runner CP ICM
| summarize hint.num_partitions=20 hint.strategy=shuffle arg_min(ModifiedDate, *) by IncidentId
// get all orignal ICM
| where Severity == 2
// sev2 ICMs
| where OwningTeamId in (XinyanTeamIds)
| summarize by IncidentId;
// find all incidents
cluster('icmcluster').database('IcMDataWarehouse').IncidentsSnapshotV2
| where CreateDate > lookBackTm
| where IncidentId in (ICMIDs) and isempty( ParentIncidentId)   // exclude the ICM having parent
| parse Title with * 'Runner Name: ' RunnerName ' Region: ' Region  ' Instance: ' RunnerInstance ' Phase: ' Phase
| parse Title with * '[Aggregate][' * '][' AggrRegion ' / ' AggrRunnerName ' / ' AggrRunnerInstance '] ' *
// [Aggregate][azf-UDRDualStackServiceTag-CP-RNM][usdodcentral / AzNetToolsRunners.UdrNsgServiceTag / azfUdrNsgServiceTagusdodcentralProd] 50% children Unhealthy
| extend RunnerName = iif(isnotempty(RunnerName), RunnerName, AggrRunnerName), RunnerInstance = iif(isnotempty(RunnerInstance), RunnerInstance, AggrRunnerInstance), Region = iif(isnotempty(Region), Region, AggrRegion), Phase = iif(isnotempty(Phase), Phase, 'AggregatedPhase')
| extend FailureType = iif(Phase in (RunnerFrameworkPhases), "Runner Phase", iif(Phase in (DeploymentPhases), "Deployment", iif(Phase in (DeletingRgPhase), "Delete RG", iif(Phase contains "AggregatedPhase", "AggregatedPhase", "Testing Failure"))))
| join kind=leftouter
(
    cluster('icmcluster').database('IcMDataWarehouse').IncidentBugs
    // get work item
    | where CreatedDate > lookBackTm
    | where IncidentId in (ICMIDs)
    | summarize arg_max(ModifiedDate, *) by IncidentId, ExternalId
    | project ExternalId, IncidentId
)
on IncidentId
| join kind=leftouter
(
    cluster('icmcluster').database('IcMDataWarehouse').IncidentDescriptions
    // get auto-correlation
    | where Date > lookBackTm
    | where IncidentId in (ICMIDs)
    | where ChangedBy == 'IcmAutoCorrelation'
    | extend IcmAutoCorrelation = 1
    | summarize max(IcmAutoCorrelation) by IncidentId
    | project IncidentId, IcmAutoCorrelation = max_IcmAutoCorrelation
)
on IncidentId
| join kind=leftouter
(
    cluster('icmcluster').database('IcMDataWarehouse').IncidentHistory
    // find out how downgrade was made
    | where ChangeDate > lookBackTm
    | where IncidentId in (ICMIDs)
    | where ChangeCategories =~ '["Edit","SeverityDowngrade"]'
    | summarize arg_max(ChangeDate, *) by IncidentId
    | extend SeverityDowngradeType = iif(ChangedBy =~ 'CN=networking-autotriage.azure.com', 'Auto-Triage', iif(ChangedBy =~ 'Automation' or ChangedBy =~ 'gautosvc', 'Automation', 'DRI'))
    | extend SeverityDowngradeBy = iif(SeverityDowngradeType != 'DRI', SeverityDowngradeType, ChangedBy)
    | project IncidentId, SeverityDowngradeBy, SeverityDowngradeType
)
on IncidentId
| join kind=leftouter
(
    cluster('icmcluster').database('IcMDataWarehouse').RootCauses
    // find root cause
    | summarize arg_max(ModifiedDate, *) by RootCauseId
    | project RootCauseId, RCATitle = Title, RCADesscription = TrimHtmlContent(Description)
)
on RootCauseId
| join kind=leftouter
(
    cluster('aznwsdn').database('aznwmds').MetricTelemetry
    // find runner instance flavor and its subscriptionId
    | where name == 'E2ERunnersDeployMetric' and isnotempty( RunnerFlavor) and isnotempty( SubscriptionId)
    | summarize arg_max(PreciseTimeStamp, *) by RunnerInstanceName
    | project RunnerInstanceName, Region, SubscriptionId, RunnerFlavor
    | join kind=leftouter
    (
        cluster('nrp').database('test').GetLatestSimpleControlPathRunnerConfigure
    )
    on $left.RunnerInstanceName == $right.RunnerInstanceName
    | extend RunnerFlavor == iif(isnotempty( RunnerFlavor), RunnerFlavor, RunnerFlavor1), SubscriptionId = iif(isnotempty( SubscriptionId), SubscriptionId, SubscriptionId1)
    | summarize by RunnerInstanceName, RunnerFlavor, SubscriptionId
)
on $left.RunnerInstance == $right.RunnerInstanceName
| extend SubscriptionId = SubscriptionId1
| extend rawTags = parse_json(Tags)
| extend RCADesscription = iif(isnotempty( RCADesscription), TrimHtmlContent(RCADesscription), '')
| extend SeverityDowngradeBy = iif(isnotempty( SeverityDowngradeBy), SeverityDowngradeBy, 'N/A'), SeverityDowngradeType = iif(isnotempty( SeverityDowngradeType), SeverityDowngradeType, 'N/A')
| extend IcmAutoCorrelation = iif(isnotempty( IcmAutoCorrelation), IcmAutoCorrelation, 0)
| extend IsTriaged = iif(isnotempty( RootCauseId), 1, iif(array_length(rawTags) > 0, 1, 0))
// DRI triaged the ICM with any of these conditions.
| extend IsTriaged = iif(IsTriaged == 1, IsTriaged, iif(OwningTeamId == '39447', 1, 0))
// if the ICM is transfered to runner team, then it is triaged.
| extend IsTriaged = iif(IsTriaged == 1, IsTriaged, iif(HowFixed in ('Transient', 'External'), 1, 0))
// if DRI marked as Transient, it is triaged.
| extend IsTriaged = iif(IsTriaged == 1, IsTriaged, iif(isnotempty(ExternalId), 1, 0))
// if the ICM has WI associated, then it is triaged.
| extend IsTriaged = iif(IsTriaged  == 1, IsTriaged, iif(SeverityDowngradeBy != 'N/A', 1, 0))
// if ICM is downgraded by Auto-Triage, or Automation or DRI, it is triaged.
| extend ExternalIdLink = iif(isnotempty( ExternalId), getRepairItemLink(ExternalId), '')
| extend IsMissingRCA = iif(isempty(RootCauseId) and isempty(ExternalIdLink) and SeverityDowngradeType != 'Automation' and SeverityDowngradeType != 'Auto-Triage', 1, 0)
// missing RCA
| extend InactiveInDays = iif(Status =~ 'active', datetime_diff('day', now(), ModifiedDate), 0)
| extend StartOfWeek = startofweek(CreateDate)
| extend OwningTeamName = getSimpleTeamName(OwningTeamName)
| extend FinalTeamGroup = iif(OwningTeamId == RunnerTeamId, 'Runner Team', iif(OwningTeamId in (XinyanTeamIds), 'Xinyan Team', 'Other Teams')), TestPhase = iif(Phase =~ 'ValidateARMTemplate', 'ValidateARMTemplate', iif(Phase in (DeploymentPhases), 'Deployment RG', iif(Phase in (DeletingRgPhase), "Delete RG", 'Others')) )
| project IncidentId, IcmLink = getIncidentLink(IncidentId), IsMissingRCA, IsTriaged, StartOfWeek, CreateDate, ModifiedDate, MonitorId, RoutingId, OwningTenantId, OwningTenantName, OwningTeamId, OwningTeamName, OwningContactAlias, Severity, Status, InactiveInDays, Title, RootCauseId, RCATitle, RCADesscription, ResponsibleTeamName, ResponsibleTeamId, Tags, RunnerName, RunnerInstance, Region, Phase, TestPhase, RunnerFlavor, SubscriptionId, FailureType, IcmAutoCorrelation, HowFixed, Mitigation = TrimHtmlContent(Mitigation), RepairItem = ExternalId, ExternalIdLink, SeverityDowngradeBy, SeverityDowngradeType, FinalTeamGroup
| sort by CreateDate asc  